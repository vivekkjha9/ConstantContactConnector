<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CTCT</name>
    </assembly>
    <members>
        <member name="T:CTCT.Components.BulkStatus.StatusReport">
            <summary>
            Represents a single Bulk Status Report in Constant Contact.
            </summary>
        </member>
        <member name="T:CTCT.Components.Component">
            <summary>
            Base class for components.
            </summary>
        </member>
        <member name="M:CTCT.Components.Component.FromJSON``1(System.String)">
            <summary>
            Get the object from JSON.
            </summary>
            <typeparam name="T">The class type to be deserialized.</typeparam>
            <param name="json">The serialization string.</param>
            <returns>Returns the object deserialized from the JSON string.</returns>
        </member>
        <member name="M:CTCT.Components.Component.ToJSON">
            <summary>
            Serialize an object to JSON.
            </summary>
            <returns>Returns a string representing the serialized object.</returns>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.ContactCount">
            <summary>
            Gets or sets the number of contacts included the activity. 
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.CreatedDate">
            <summary>
            Gets or sets time and date that created the activity after importing the file, in ISO 8601 format 
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.ErrorCount">
            <summary>
            Gets or sets the number of errors encountered during the activity 
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.FileName">
            <summary>
            Gets or sets the URI pointing to the exported file. Make a GET call to the URI to retrieve the file. 
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.FinishDate">
            <summary>
            Gets or sets time and date that activity was completed, in ISO 8601 format 
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.Id">
            <summary>
            Gets or sets the unique ID for the activity.
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.StartDate">
            <summary>
             Gets or sets time and date that the API started processing the activity, in ISO 8601 format 
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.StatusString">
            <summary>
            Gets or sets the status of the activity
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.Status">
            <summary>
            Gets or sets the status of the activity
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.TypeString">
            <summary>
            Gets or sets the type of activity
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.Type">
            <summary>
            Gets or sets the type of activity
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.Warnings">
            <summary>
            Gets or sets the list of imported data.
            </summary>
        </member>
        <member name="P:CTCT.Components.BulkStatus.StatusReport.Errors">
            <summary>
            Gets or sets a lists errors that occurred (up to the first 100) when the activity ran 
            </summary>
        </member>
        <member name="T:CTCT.Components.BulkStatus.BulkActivityType">
            <summary>
            ActionBy structure.
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityType.ALL">
            <summary>
            All
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityType.ADD_CONTACTS">
            <summary>
            AddContacts.
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityType.CLEAR_CONTACTS_FROM_LISTS">
            <summary>
            ClearContactsFromLists.
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityType.EXPORT_CONTACTS">
            <summary>
            ExportContacts.
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityType.REMOVE_CONTACTS_FROM_LISTS">
            <summary>
            RemoveContactsFromLists.
            </summary>
        </member>
        <member name="T:CTCT.Components.BulkStatus.BulkActivityStatus">
            <summary>
            Activity status structure.
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityStatus.ALL">
            <summary>
            All
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityStatus.UNCONFIRMED">
            <summary>
            Unconfirmed.
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityStatus.PENDING">
            <summary>
            Pending.
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityStatus.QUEUED">
            <summary>
            Queued.
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityStatus.RUNNING">
            <summary>
            Running.
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityStatus.COMPLETE">
            <summary>
            Complete.
            </summary>
        </member>
        <member name="F:CTCT.Components.BulkStatus.BulkActivityStatus.ERROR">
            <summary>
            Error.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.EmailCampaignPreview">
            <summary>
            Represents a content to preview an existing email campaign
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaignPreview.FromEmail">
            <summary>
            The email address the email campaign originated from
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaignPreview.PreviewEmailContent">
            <summary>
            The preview of the HTML version of the email campaign
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaignPreview.PreviewTextContent">
            <summary>
            The preview of the text-only version of the email campaign
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaignPreview.ReplyToEmail">
            <summary>
            The reply-to email address for the email campaign
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaignPreview.Subject">
            <summary>
            The subject line content for the message
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.GuestInformation">
            <summary>
            Guest information
            </summary>
        </member>
        <member name="M:CTCT.Components.EventSpot.GuestInformation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.GuestInformation.GuestId">
            <summary>
            Guest Id
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.GuestInformation.GuestSection">
            <summary>
            Guest section
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.Guests">
            <summary>
            Guests class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Guests.GuestCount">
            <summary>
            GuestCount
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Guests.GuestInformation">
            <summary>
            Guest information list
            </summary>
        </member>
        <member name="T:CTCT.Services.BulkStatusService">
            <summary>
            Bulk status service
            </summary>
        </member>
        <member name="T:CTCT.Services.BaseService">
            <summary>
            Super class for all services.
            </summary>
        </member>
        <member name="T:CTCT.Services.IBaseService">
            <summary>
            Interface for BaseService class.
            </summary>
        </member>
        <member name="P:CTCT.Services.IBaseService.UserServiceContext">
            <summary>
            User service context
            </summary>
        </member>
        <member name="P:CTCT.Services.IBaseService.RestClient">
            <summary>
            Returns the REST client object.
            </summary>
        </member>
        <member name="M:CTCT.Services.BaseService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            Class constructor.
            </summary>
            <param name="userServiceContext"></param>
        </member>
        <member name="M:CTCT.Services.BaseService.#ctor(CTCT.Util.IRestClient,CTCT.Services.IUserServiceContext)">
            <summary>
            Constructor with the option to to supply an alternative rest client to be used.
            </summary>
            <param name="restClient">RestClientInterface implementation to be used in the service.</param>
            <param name="userServiceContext">User service context.</param>
        </member>
        <member name="M:CTCT.Services.BaseService.GetQueryParameters(System.Object[])">
            <summary>
            Constructs the query with specified parameters.
            </summary>
            <param name="prms">An array of parameter name and value combinations.</param>
            <returns>Returns the query part of the URL.</returns>
        </member>
        <member name="M:CTCT.Services.BaseService.ConstructUrl(System.String,System.Object[],System.Object[])">
            <summary>
            Creates the URL for API access.
            </summary>
            <param name="urlPart">URL part.</param>
            <param name="prms">Additional parameters for URL formatting.</param>
            <param name="queryList">Query parameters to add to the URL.</param>
            <returns>Returns the URL with all specified query parameters.</returns>
        </member>
        <member name="P:CTCT.Services.BaseService.UserServiceContext">
            <summary>
            User service context
            </summary>
        </member>
        <member name="P:CTCT.Services.BaseService.RestClient">
            <summary>
            Get the rest client being used by the service.
            </summary>
        </member>
        <member name="T:CTCT.Services.IBulkStatusService">
            <summary>
            Interface for bulk status service
            </summary>
        </member>
        <member name="M:CTCT.Services.IBulkStatusService.GetBulkActivitiesStatus">
            <summary>
            Get all bulk activities status.
            </summary>
            <returns>A list of StatusReport</returns>
            <exception cref="T:CTCT.Exceptions.CtctException">CtctException.</exception>
        </member>
        <member name="M:CTCT.Services.IBulkStatusService.GetBulkActivitiesStatus(CTCT.Components.BulkStatus.BulkActivityType,CTCT.Components.BulkStatus.BulkActivityStatus)">
            <summary>
            Get all bulk activities status filtered by status and/or type.
            </summary>
            <param name="type">Bulk activity type</param>
            <param name="status">Bulk activity status</param>
            <returns>A list of StatusReport</returns>
            <exception cref="T:CTCT.Exceptions.CtctException">CtctException.</exception>
        </member>
        <member name="M:CTCT.Services.IBulkStatusService.GetBulkActivityStatusById(System.String)">
            <summary>
            Gets the status report for an activity by ID
            </summary>
            <param name="activityId">The activity ID</param>
            <returns>The StatusReport</returns>
            <exception cref="T:CTCT.Exceptions.CtctException">CtctException.</exception>
        </member>
        <member name="M:CTCT.Services.BulkStatusService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            Bulk status report service constructor
            </summary>
            <param name="userServiceContext"></param>
        </member>
        <member name="M:CTCT.Services.BulkStatusService.GetBulkActivitiesStatus">
            <summary>
            Get all bulk activities status.
            </summary>
            <returns>A list of StatusReport</returns>
            <exception cref="T:CTCT.Exceptions.CtctException">CtctException.</exception>
        </member>
        <member name="M:CTCT.Services.BulkStatusService.GetBulkActivitiesStatus(CTCT.Components.BulkStatus.BulkActivityType,CTCT.Components.BulkStatus.BulkActivityStatus)">
            <summary>
            Get all bulk activities status filtered by status and/or type.
            </summary>
            <param name="type">Bulk activity type</param>
            <param name="status">Bulk activity status</param>
            <returns>A list of StatusReport</returns>
            <exception cref="T:CTCT.Exceptions.CtctException">CtctException.</exception>
        </member>
        <member name="M:CTCT.Services.BulkStatusService.GetBulkActivityStatusById(System.String)">
            <summary>
            Gets the status report for an activity by ID
            </summary>
            <param name="activityId">The activity ID</param>
            <returns>The StatusReport</returns>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.Email">
            <summary>
            Email address.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.FirstName">
            <summary>
            First name.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.MiddleName">
            <summary>
            Middle name.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.JobTitle">
            <summary>
            Job title.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CompanyName">
            <summary>
            Company name.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.WorkPhone">
            <summary>
            Work phone.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.HomePhone">
            <summary>
            Home phone.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.Address1">
            <summary>
            Address line 1.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.Address2">
            <summary>
            Address line 2.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.Address3">
            <summary>
             Address line 3.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.City">
            <summary>
            City.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.StateProvince">
            <summary>
            US state or province.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.Country">
            <summary>
            Country.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.PostalCode">
            <summary>
            Postal code.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.SubPostalCode">
            <summary>
            Sub-postal code.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField1">
            <summary>
            Custom field 1.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField2">
            <summary>
            Custom field 2.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField3">
            <summary>
            Custom field 3.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField4">
            <summary>
            Custom field 4.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField5">
            <summary>
            Custom field 5.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField6">
            <summary>
            Custom field 6.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField7">
            <summary>
            Custom field 7.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField8">
            <summary>
            Custom field 8.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField9">
            <summary>
            Custom field 9.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField10">
            <summary>
            Custom field 10.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField11">
            <summary>
            Custom field 11.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField12">
            <summary>
            Custom field 12.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField13">
            <summary>
            Custom field 13.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField14">
            <summary>
            Custom field 14.
            </summary>
        </member>
        <member name="P:CTCT.Settings.ActivitiesColumns.CustomField15">
            <summary>
            Custom field 15.
            </summary>
        </member>
        <member name="T:CTCT.Authentication.WebPage.AuthenticationWebPage">
            <summary>
            Class used to authenticate from web application
            </summary>
        </member>
        <member name="F:CTCT.Authentication.WebPage.AuthenticationWebPage.AccessToken">
            <summary>
            Access token field
            </summary>
        </member>
        <member name="F:CTCT.Authentication.WebPage.AuthenticationWebPage.State">
            <summary>
            State field
            </summary>
        </member>
        <member name="F:CTCT.Authentication.WebPage.AuthenticationWebPage.HttpContext">
            <summary>
            Httpcontext field
            </summary>
        </member>
        <member name="M:CTCT.Authentication.WebPage.AuthenticationWebPage.#ctor(System.Web.HttpContext,System.String)">
            <summary>
            Initialize new instance of AuthenticationWebForm class
            </summary>
            <param name="httpContext">current application context</param>
            <param name="state">state query parameter</param>
        </member>
        <member name="M:CTCT.Authentication.WebPage.AuthenticationWebPage.GetAuthorizationCode">
            <summary>
            Gets authorization code
            </summary>
        </member>
        <member name="M:CTCT.Authentication.WebPage.AuthenticationWebPage.GetAccessTokenByCode(System.String)">
            <summary>
            Gets access token by code
            </summary>
            <param name="code">authorization code</param>
            <returns>access token</returns>
        </member>
        <member name="T:CTCT.AuthenticationForm">
            <summary>
            Form used for windows authentication
            </summary>
        </member>
        <member name="F:CTCT.AuthenticationForm.AccessToken">
            <summary>
            Access token field
            </summary>
        </member>
        <member name="F:CTCT.AuthenticationForm.State">
            <summary>
            State field
            </summary>
        </member>
        <member name="M:CTCT.AuthenticationForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CTCT.AuthenticationForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CTCT.AuthenticationForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CTCT.AuthenticationForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CTCT.Components.AccountService.OrganizationAddresses">
            <summary>
            Organization addresses
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.OrganizationAddresses.City">
            <summary>
            REQUIRED if including organization_addresses; The city the organization is located in 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.OrganizationAddresses.CountryCode">
            <summary>
            REQUIRED if including organization_addresses; Standard 2 letter ISO 3166-1 code for the organization_addresses 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.OrganizationAddresses.Line1">
            <summary>
            REQUIRED if including organization_addresses; Line 1 of the organization's street address 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.OrganizationAddresses.Line2">
            <summary>
            Line 2 of the organization's street address
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.OrganizationAddresses.Line3">
            <summary>
            Line 3 of the organization's street address 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.OrganizationAddresses.PostalCode">
            <summary>
            Postal (zip) code of the organization's street address 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.OrganizationAddresses.State">
            <summary>
            Name of the state or province for the organization_addresses; 
            For country = CA or US, this field is overwritten by the state or province name derived from the state_code, if entered. 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.OrganizationAddresses.StateCode">
            <summary>
            Use ONLY for the standard 2 letter abbreviation for the US state or Canadian province for organization_addresses;
            NOTE: A data validation error occurs if state_code is populated and country_code does not = US or CA. 
            </summary>
        </member>
        <member name="T:CTCT.Components.AccountService.AccountSummaryInformation">
            <summary>
            Summary account-related information 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.CompanyLogo">
            <summary>
            URL to the logo associated with the account if the account owner has provided one. 
            No value is returned if user has not added a logo. 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.CountryCode">
            <summary>
            Standard 2 letter ISO 3166-1 code of the country associated with the account owner 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.Email">
            <summary>
            Email address associated with the account owner 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.FirstName">
            <summary>
            The account owner's first name 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.LastName">
            <summary>
            The account owner's last name 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.OrganizationName">
            <summary>
            Name of the organization associated with the account 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.Phone">
            <summary>
            Phone number associated with the account owner 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.StateCode">
            <summary>
            2 letter code for USA state or Canadian province ONLY, available only if country_code = US or CA associated with the account owner 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.TimeZone">
            <summary>
            The time zone associated with the account 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.Website">
            <summary>
            The URL of the Web site associated with the account 
            </summary>
        </member>
        <member name="P:CTCT.Components.AccountService.AccountSummaryInformation.OrganizationAddresses">
            <summary>
            An array of organization street addresses; currently, only a single address is supported. 
            This is not a required attribute, but if you include organization_addresses in a put, it must include the country_code, city, and line1 fields at minimum. 
            </summary>
        </member>
        <member name="T:CTCT.Components.Activities.Activity">
            <summary>
            Activity class.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.Id">
            <summary>
            Activity id.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.StartDateString">
            <summary>
            Represetns the start date string.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.FinishDateString">
            <summary>
            String representation of finish date.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.FinishDate">
            <summary>
            Gets or sets the finish date.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.FileName">
            <summary>
            Gets or sets the filename.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.CreatedDateString">
            <summary>
            String representation of created date.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.CreatedDate">
            <summary>
            Gets or sets the created date.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.ErrorCount">
            <summary>
            Gets or sets the error count.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.ContactCount">
            <summary>
            Gets or sets the contact count.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.Errors">
            <summary>
            Gets or sets the error list.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.Activity.Warnings">
            <summary>
            Gets or sets the warning list.
            </summary>
        </member>
        <member name="T:CTCT.Components.Activities.AddContacts">
            <summary>
            Represents an AddContact activity class.
            </summary>
        </member>
        <member name="M:CTCT.Components.Activities.AddContacts.#ctor(System.Collections.Generic.IList{CTCT.Components.Activities.AddContactsImportData},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Class constructor.
            </summary>
            <param name="contacts">List of contacts.</param>
            <param name="lists">List of id's.</param>
            <param name="columnNames">Column names to import.</param>
        </member>
        <member name="P:CTCT.Components.Activities.AddContacts.Id">
            <summary>
            Activity id.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContacts.ImportData">
            <summary>
            Gets or sets the list of imported data.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContacts.Lists">
            <summary>
            Gets or sets the list of id's to add.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContacts.ColumnNames">
            <summary>
            Gets or sets the list of column names.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContacts.ContactCount">
            <summary>
            Gets or sets the contact count that were processed by this activity.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContacts.ErrorCount">
            <summary>
            Gets or sets the activity process error count.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContacts.Type">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="T:CTCT.Components.Activities.AddContactsImportData">
            <summary>
            Add contacts import data class.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.MiddleName">
            <summary>
            Gets or sets the middle name.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.JobTitle">
            <summary>
            Gets or sets the job title.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.CompanyName">
            <summary>
            Gets or sets the company name.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.WorkPhone">
            <summary>
            Gets or sets the work phone.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.HomePhone">
            <summary>
            Gets or sets the home phone.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.BirthdayDay">
            <summary>
            Birthday day
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.BirthdayMonth">
            <summary>
            Birthday month
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.Anniversary">
            <summary>
            Anniversary
            Accepts the following formats MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, M-DD-YYYY. 
            The year must be greater than 1900 and cannot be more than 10 years in the future (with respect to the current year
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.EmailAddresses">
            <summary>
            Gets or sets the email addresses list.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.Addresses">
            <summary>
            Gets or sets addresses list.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.AddContactsImportData.CustomFields">
            <summary>
            Gets or sets the custom fields list.
            </summary>
        </member>
        <member name="T:CTCT.Components.Activities.ClearContactList">
            <summary>
            Represents an ClearContactList activity class.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.ClearContactList.Lists">
            <summary>
            Gets or sets the list of id's to add.
            </summary>
        </member>
        <member name="T:CTCT.Components.Activities.ExportContacts">
            <summary>
            Export contacts class.
            </summary>
        </member>
        <member name="M:CTCT.Components.Activities.ExportContacts.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.ExportContacts.FileType">
            <summary>
            Gets or sets the field type.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.ExportContacts.SortBy">
            <summary>
            Gets or sets sort by.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.ExportContacts.ExportDateAdded">
            <summary>
            Gets or sets the flag for export date added.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.ExportContacts.ExportAddedBy">
            <summary>
            Gets or sets the flag for export added by.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.ExportContacts.Lists">
            <summary>
            Gets or sets list of id's to export.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.ExportContacts.ColumnNames">
            <summary>
            Gets or sets the column names.
            </summary>
        </member>
        <member name="T:CTCT.Components.Activities.RemoveContact">
            <summary>
            Represents an AddContact activity class.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.RemoveContact.ImportData">
            <summary>
            Gets or sets the list of imported data.
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.RemoveContact.Lists">
            <summary>
            Gets or sets the list of id's to add.
            </summary>
        </member>
        <member name="T:CTCT.Components.Activities.ImportEmailAddress">
            <summary>
            Represents an ImportEmailAddress class
            </summary>
        </member>
        <member name="P:CTCT.Components.Activities.ImportEmailAddress.EmailAddresses">
            <summary>
            Gets or sets the list of email addresses
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.SentContactList">
            <summary>
            Represents a single List in Constant Contact.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.SentContactList.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.SentContactList.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.VerifiedEmailAddress">
            <summary>
            VerifiedEmailAddress class
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.VerifiedEmailAddress.EmailAddr">
            <summary>
            Gets or sets the email address.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.VerifiedEmailAddress.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.ClickThroughDetails">
            <summary>
            Represents a click through detail class.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.ClickThroughDetails.Url">
            <summary>
            Gets or sets the actual url that was clicked on.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.ClickThroughDetails.UrlUid">
            <summary>
            Gets or sets the url unique identifier.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.ClickThroughDetails.ClickCount">
            <summary>
            Gets or sets the number of times the url was clicked on.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.EmailCampaign">
            <summary>
            Represents a single Campaign in Constant Contact.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.FromName">
            <summary>
            Gets or sets the name from.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.FromEmail">
            <summary>
            Gets or sets the email from.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.ReplyToEmail">
            <summary>
            Gets or sets the reply email address.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.TemplateTypeString">
            <summary>
            Campaign type, string representation.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.TemplateType">
            <summary>
            Gets or sets the campaign type.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.CreatedDateString">
            <summary>
            Created date string representation.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.CreatedDate">
            <summary>
            Gets or sets the creation date.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.ModifiedDateString">
            <summary>
            String representation of modification date.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.ModifiedDate">
            <summary>
            Gets or sets the modification date.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.LastRunDateString">
            <summary>
            String representation of last run date.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.LastRunDate">
            <summary>
            Gets or sets the last run date.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.NextRunDateString">
            <summary>
            String representation of next run date.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.NextRunDateDate">
            <summary>
            Gets or sets the next run date.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.StatusString">
            <summary>
            Campaign status, string representation.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.Status">
            <summary>
            Gets or sets the campaign status.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.IsViewAsWebPageEnabled">
            <summary>
            Gets or sets the permission for web page.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.PermissionReminderText">
            <summary>
            Gets or sets the permission reminder text.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.ViewAsWebPageText">
            <summary>
            Gets or sets the view page text.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.ViewAsWebPageLinkText">
            <summary>
            Gets or sets the view page link.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.GreetingSalutations">
            <summary>
            Gets or sets the greeting.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.GreetingNameString">
            <summary>
            Greeting name, string representation.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.GreetingName">
            <summary>
            Gets or sets the greeting name.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.PermanentLink">
            <summary>
            Gets or sets o non-expiring link to use for sharing a sent email campaign using social channels
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.GreetingString">
            <summary>
            Gets or sets the greeting string.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.EmailContent">
            <summary>
            Gets or sets the email content.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.EmailContentFormatString">
            <summary>
            String representation of email content format.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.EmailContentFormat">
            <summary>
            Gets or sets the email content format.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.TextContent">
            <summary>
            Gets or sets the text content.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.StyleSheet">
            <summary>
            Gets or sets the syle sheet.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.TrackingSummary">
            <summary>
            Gets or sets the tracking summary.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.ClickThroughDetails">
            <summary>
            Click through details for each link in this email campaign.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.MessageFooter">
            <summary>
            Gets or sets the message footer.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.Lists">
            <summary>
            Gets or sets the lists where the campaign is registered.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.EmailCampaign.IsVisibleInUI">
            <summary>
            Gets or sets the flag for UI visibility.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.GreetingName">
            <summary>
            Greeting name.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.GreetingName.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.GreetingName.FIRST_NAME">
            <summary>
            First name.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.GreetingName.LAST_NAME">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.GreetingName.FIRST_AND_LAST_NAME">
            <summary>
            First and last name.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.TemplateType">
            <summary>
            Campaign type.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.TemplateType.CUSTOM">
            <summary>
            Custom type.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.TemplateType.STOCK">
            <summary>
            Stock type.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.CampaignStatus">
            <summary>
            Campaign status.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.CampaignStatus.DRAFT">
            <summary>
            Draft.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.CampaignStatus.RUNNING">
            <summary>
            Running.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.CampaignStatus.SENT">
            <summary>
            Sent.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.CampaignStatus.SCHEDULED">
            <summary>
            Scheduled.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.CampaignEmailFormat">
            <summary>
            Campaign email format.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.CampaignEmailFormat.HTML">
            <summary>
            HTML.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.CampaignEmailFormat.XHTML">
            <summary>
            XHTML.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.Address">
            <summary>
            Represents a single Address of a Contact.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.Line1">
            <summary>
            Gets or sets the first address line.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.Line2">
            <summary>
            Gets or sets the second address line.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.Line3">
            <summary>
            Gets or sets the third address line.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.City">
            <summary>
            Gets or sets the city.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.AddressType">
            <summary>
            Gets or sets the address type.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.StateCode">
            <summary>
            Gets or sets the state code.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.StateName">
            <summary>
            Gets or sets the state name.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.CountryCode">
            <summary>
            Gets or sets the contry code.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Address.SubPostalCode">
            <summary>
            Gets or sets the subpostal code.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.AddressType">
            <summary>
            Address type structure.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.AddressType.Personal">
            <summary>
            Personal.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.AddressType.Business">
            <summary>
            Business.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.Contact">
            <summary>
            Represents a single Contact in Constant Contact.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.MiddleName">
            <summary>
            Gets or sets the middle name.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.Confirmed">
            <summary>
            Gets or sets the confirmation flag.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.Source">
            <summary>
            Gets or sets the source.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.EmailAddresses">
            <summary>
            Gets or sets the email addresses.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.PrefixName">
            <summary>
            Gets or sets the prefix name.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.JobTitle">
            <summary>
            Gets or sets job title.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.Addresses">
            <summary>
            Gets or sets the addresses.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.Notes">
            <summary>
            Gets or sets the notes.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.CompanyName">
            <summary>
            Gets or sets the company name.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.HomePhone">
            <summary>
            Gets or sets the home phone.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.WorkPhone">
            <summary>
            Gets or sets the work phone.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.CellPhone">
            <summary>
            Gets or sets the cell phone.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.Fax">
            <summary>
            Gets or sets the fax number.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.DateCreated">
            <summary>
            Gets or sets the date and time the contact was added
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.DateModified">
            <summary>
            Gets or sets the date and time contact's information was last modified
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.CustomFields">
            <summary>
            Gets or sets the list of custom fields.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.Lists">
            <summary>
            Gets or sets the lists.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Contact.SourceDetails">
            <summary>
            Gets or sets the source details.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.ContactStatus">
            <summary>
            Contact status enumeration
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.ContactStatus.ACTIVE">
            <summary>
            Active.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.ContactStatus.UNCONFIRMED">
            <summary>
            Unconfirmed.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.ContactStatus.OPTOUT">
            <summary>
            OptOut.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.ContactStatus.REMOVED">
            <summary>
            Removed.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.ActionBy">
            <summary>
            ActionBy structure.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.ActionBy.ActionByVisitor">
            <summary>
            ActionByVisitor.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.ActionBy.ActionByOwner">
            <summary>
            ActionByOwner.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.Status">
            <summary>
            Status structure.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.Status.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.Status.Unconfirmed">
            <summary>
            Unconfirmed.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.Status.OptOut">
            <summary>
            OptOut.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.Status.Removed">
            <summary>
            Removed.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.Status.NonSubscriber">
            <summary>
            NonSubscriber.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.Status.Visitor">
            <summary>
            Visitor.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.ContactList">
            <summary>
            Represents a single List in Constant Contact.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.ContactList.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.ContactList.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.ContactList.ContactCount">
            <summary>
            Gets or sets the number of contacts in the list
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.ContactList.Name">
            <summary>
            Gets or sets the contact list name
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.ContactList.DateCreated">
            <summary>
            Gets or sets the date and time the contact list was added
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.ContactList.DateModified">
            <summary>
            Gets or sets the date and time list's information was last modified
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.CustomField">
            <summary>
            Custom field class.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.CustomField.Name">
            <summary>
            Name of the custom field. Only accepted names.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.CustomField.Value">
            <summary>
            Value of the custom field.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.CustomFieldName">
            <summary>
            Custom fields names structure.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField1">
            <summary>
            Custom field 1.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField2">
            <summary>
            Custom field 2.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField3">
            <summary>
            Custom field 3.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField4">
            <summary>
            Custom field 4.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField5">
            <summary>
            Custom field 5.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField6">
            <summary>
            Custom field 6.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField7">
            <summary>
            Custom field 7.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField8">
            <summary>
            Custom field 8.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField9">
            <summary>
            Custom field 9.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField10">
            <summary>
            Custom field 10.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField11">
            <summary>
            Custom field 11.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField12">
            <summary>
            Custom field 12.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField13">
            <summary>
            Custom field 13.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField14">
            <summary>
            Custom field 14.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.CustomFieldName.CustomField15">
            <summary>
            Custom field 15.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.EmailAddress">
            <summary>
            Represents a single EmailAddress of a Contact.
            </summary>
        </member>
        <member name="M:CTCT.Components.Contacts.EmailAddress.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:CTCT.Components.Contacts.EmailAddress.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="emailAddress">Email address.</param>
        </member>
        <member name="P:CTCT.Components.Contacts.EmailAddress.Id">
            <summary>
            Email address id.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.EmailAddress.OptOutDate">
            <summary>
            Gets or sets the OPT out date.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.EmailAddress.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.EmailAddress.OptInSource">
            <summary>
            Gets or sets the OPT source.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.EmailAddress.OptInDate">
            <summary>
            Gets or sets the OPT date.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.EmailAddress.OptOutSource">
            <summary>
            Gets or sets the OPT source.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.EmailAddress.ConfirmStatus">
            <summary>
            Gets or sets the confirmation status.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.EmailAddress.EmailAddr">
            <summary>
            Gets or sets the email address.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.ConfirmStatus">
            <summary>
            Confirmation status structure.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.ConfirmStatus.Confirmed">
            <summary>
            Confirmed.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.ConfirmStatus.NoConfirmationRequired">
            <summary>
            NoConfirmationRequired.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.ConfirmStatus.Unconfirmed">
            <summary>
            Unconfirmed.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.OptInSource">
            <summary>
            Option source structure.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.OptInSource.ActionByVisitor">
            <summary>
            ActionByVisitor.
            </summary>
        </member>
        <member name="F:CTCT.Components.Contacts.OptInSource.ActionByOwner">
            <summary>
            ActionByOwner.
            </summary>
        </member>
        <member name="T:CTCT.Components.Contacts.Note">
            <summary>
            Note class.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Note.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Note.Content">
            <summary>
            Gets or sets the note content.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Note.CreatedDate">
            <summary>
            Gets or sets the datetime when note was created.
            </summary>
        </member>
        <member name="P:CTCT.Components.Contacts.Note.ModifiedDate">
            <summary>
            Gets or sets the datetime when note was modified.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.MessageFooter">
            <summary>
            Represents a click through detail class.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.City">
            <summary>
            Gets or sets the city.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.Country">
            <summary>
            Gets or sets the country.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.OrganizationName">
            <summary>
            Gets or sets the organization name.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.AddressLine1">
            <summary>
            Gets or sets the addrese line 1.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.AddressLine2">
            <summary>
            Gets or sets the addrese line 2.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.AddressLine3">
            <summary>
            Gets or sets the addrese line 3.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.InternationalState">
            <summary>
            Gets or sets the international state.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.IncludeForwardEmail">
            <summary>
            Gets or sets the include forward email flag.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.ForwardEmailLinkText">
            <summary>
            Gets or sets the forward email link text.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.IncludeSubscribeLink">
            <summary>
            Gets or sets the include subscribe link flag.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.MessageFooter.SubscribeLinkText">
            <summary>
            Gets or sets the subscribe link text.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.Schedule">
            <summary>
            Represents a campaign Schedule in Constant Contact class.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.Schedule.Id">
            <summary>
            Unique id of the schedule.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.Schedule.ScheduledDateString">
            <summary>
            The scheduled start date/time in ISO 8601 format.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.Schedule.ScheduledDate">
            <summary>
            Gets or sets the scheduled date.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.TestSend">
            <summary>
            Represents a campaign Test Send in Constant Contact class.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.TestSend.Format">
            <summary>
            Format of the email to send (HTML, TEXT, HTML_AND_TEXT).
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.TestSend.PersonalMessage">
            <summary>
            Personal message to send along with the test send.
            </summary>
        </member>
        <member name="P:CTCT.Components.EmailCampaigns.TestSend.EmailAddresses">
            <summary>
            Array of email addresses to send the test send to.
            </summary>
        </member>
        <member name="T:CTCT.Components.EmailCampaigns.EmailFormat">
            <summary>
            Email format.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.EmailFormat.HTML">
            <summary>
            Html format.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.EmailFormat.TEXT">
            <summary>
            Text format.
            </summary>
        </member>
        <member name="F:CTCT.Components.EmailCampaigns.EmailFormat.HTML_AND_TEXT">
            <summary>
            Html and text format.
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.EventSpotAddress">
            <summary>
            EventSpotAddress class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.StateCode">
            <summary>
            Standard 2 letter abbreviation for the state or Canadian province of the event location; if state_code is entered, the system overwrites the state property with the resolved state or province name
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.PostalCode">
            <summary>
            Postal ZIP code for the event 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.State">
            <summary>
            State or Canadian province name of the event location 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.Longitude">
            <summary>
            Longitude coordinates of the event location, , not used to determine event Location at this time on map if is_map_displayed set to true 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.Latitude">
            <summary>
            Latitude coordinates of the event location, not used to determine event Location on map if is_map_displayed set to true 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.Line1">
            <summary>
            Event address line 1 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.Line2">
            <summary>
            Event address line 2
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.Line3">
            <summary>
            Event address line 3
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.CountryCode">
            <summary>
            Standard 2 letter ISO 3166-1 code of the country associated with the event address 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.Country">
            <summary>
            Country of the event location 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotAddress.City">
            <summary>
            City of the event location 
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.Attribute">
            <summary>
            EventSpot Item Attribute
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Attribute.Id">
            <summary>
            The attribute's unique ID 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Attribute.Name">
            <summary>
            Name of attribute being sold 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Attribute.QuantityAvailable">
            <summary>
            Number of item attributes that are still available for sale 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Attribute.QuantityTotal">
            <summary>
            Number of attributes offered for sale 
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.EventSpotContact">
            <summary>
            EventSpotContact class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotContact.EmailAddress">
            <summary>
            Event contact's email-address
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotContact.Name">
            <summary>
            Name of the person conducting or managing the event 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotContact.OrganizationName">
            <summary>
            Event contact's organization name 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventSpotContact.PhoneNumber">
            <summary>
            Event contact's phone number 
            </summary>
        </member>
        <member name="T:CTCT.ConstantContactFactory">
            <summary>
            ConstantContactFactory class used to create needed services
            </summary>
        </member>
        <member name="M:CTCT.ConstantContactFactory.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            ConstantContactFactory constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateAccountService">
            <summary>
            Create an account service 
            </summary>
            <returns>IAccountService</returns>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateActivityService">
            <summary>
            Create an activity service
            </summary>
            <returns>IActivityService</returns>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateCampaignScheduleService">
            <summary>
            Create a campaign schedule service
            </summary>
            <returns>ICampaignScheduleService</returns>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateCampaignTrackingService">
            <summary>
            Create a campaign tracking service
            </summary>
            <returns>ICampaignTrackingService</returns>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateContactService">
            <summary>
            Create a contact service
            </summary>
            <returns>IContactService</returns>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateContactTrackingService">
            <summary>
            Create a contact tracking service
            </summary>
            <returns>IContactTrackingService</returns>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateEmailCampaignService">
            <summary>
            Create an email campign service
            </summary>
            <returns>IEmailCampaignService</returns>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateEventSpotService">
            <summary>
            Create an event spot service
            </summary>
            <returns>IEventSpotService</returns>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateListService">
            <summary>
            Create a list service
            </summary>
            <returns>IListService</returns>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateMyLibraryService">
            <summary>
            Create a my library service
            </summary>
            <returns>IMyLibraryService</returns>
        </member>
        <member name="M:CTCT.ConstantContactFactory.CreateBulkStatusService">
            <summary>
            Create a bulk status service
            </summary>
            <returns>IBulkStatusService</returns>
        </member>
        <member name="T:CTCT.Resources.Errors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.ActivityOrId">
            <summary>
              Looks up a localized string similar to Only an interger or Activity are allowed for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.CampaignTrackingOrId">
            <summary>
              Looks up a localized string similar to Only an interger or CampaignTracking are allowed for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.ContactOrId">
            <summary>
              Looks up a localized string similar to Only an interger or Contact are allowed for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.ContactTrackingOrId">
            <summary>
              Looks up a localized string similar to Only an interger or ContactTracking are allowed for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.EmailCampaignOrId">
            <summary>
              Looks up a localized string similar to Only an interger or EmailCampaign are allowed for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.FieldNull">
            <summary>
              Looks up a localized string similar to Field must not be null.
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.FileIdNull">
            <summary>
              Looks up a localized string similar to File Id parameter must not be null.
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.FileNameNull">
            <summary>
              Looks up a localized string similar to You must provide a FileName parameter for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.FileNull">
            <summary>
              Looks up a localized string similar to You must provide a File parameter for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.FileTypeInvalid">
            <summary>
              Looks up a localized string similar to File type is invalid..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.InvalidId">
            <summary>
              Looks up a localized string similar to Only an valid id is allowed for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.InvalidWebhook">
            <summary>
              Looks up a localized string similar to Invalid Webhook. The x-ctct-hmac-sha256 does not correspond to message encryption..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.ListOrId">
            <summary>
              Looks up a localized string similar to Only an interger or ContactList are allowed for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.MyLibraryOrId">
            <summary>
              Looks up a localized string similar to Only an interger or a MyLibrary item is allowed for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.NoClientSecret">
            <summary>
              Looks up a localized string similar to You must provide the client secret (via constructor or setClientSecret() ) corresponding to your API   from Constant Contact.
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.ObjectNull">
            <summary>
              Looks up a localized string similar to Object provided is not valid..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.ScheduleOrId">
            <summary>
              Looks up a localized string similar to Only an interger or Schedule are allowed for this method..
            </summary>
        </member>
        <member name="P:CTCT.Resources.Errors.UpdateId">
            <summary>
              Looks up a localized string similar to You must provide a contact ID in order to update a contact..
            </summary>
        </member>
        <member name="P:CTCT.Settings.Login.BaseUrl">
            <summary>
            Login base URL.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Login.LoginEndpoint">
            <summary>
            Login endpoint.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Login.Host">
            <summary>
            Request host.
            </summary>
        </member>
        <member name="T:CTCT.Services.IEventSpotService">
            <summary>
            Interface for EventSpot class
            </summary>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetAllEventSpots(System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            View all existing events
            </summary>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 50</param>
            <param name="pag">Pagination object</param>
            <returns>ResultSet containing a results array of IndividualEvents</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetEventSpot(System.String)">
            <summary>
            Retrieve an event specified by the event_id
            </summary>
            <param name="eventId">Event id</param>
            <returns>The event</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PostEventSpot(CTCT.Components.EventSpot.IndividualEvent)">
            <summary>
            Publish an event
            </summary>
            <param name="eventSpot">The event to publish</param>
            <returns>The published event</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PutEventSpot(System.String,CTCT.Components.EventSpot.IndividualEvent)">
            <summary>
            Update an event
            </summary>
            <param name="eventId">Event id to be updated</param>
            <param name="eventSpot">The new values for event</param>
            <returns>The updated event</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PatchEventSpotStatus(System.String,CTCT.Components.EventSpot.EventStatus)">
            <summary>
            Publish or cancel an event by changing the status of the event
            </summary>
            <param name="eventId">Event id</param>
            <param name="eventStatus">New status of the event. ACTIVE" and "CANCELLED are allowed</param>
            <returns>The updated event</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetAllEventFees(System.String)">
            <summary>
            Retrieve all existing fees for an event
            </summary>
            <param name="eventId">Event id</param>
            <returns>A list of event fees for the specified event</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetEventFee(System.String,System.String)">
            <summary>
            Retrieve an individual event fee
            </summary>
            <param name="eventId">Event id</param>
            <param name="feeId">EventFee id</param>
            <returns>An EventFee object</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PutEventFee(System.String,System.String,CTCT.Components.EventSpot.EventFee)">
            <summary>
            Update an individual event fee
            </summary>
            <param name="eventId">Event id</param>
            <param name="feeId">EventFee id</param>
            <param name="eventFee">The new values of EventFee</param>
            <returns>The updated EventFee</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.DeleteEventFee(System.String,System.String)">
            <summary>
             Delete an individual event fee
            </summary>
            <param name="eventId">Event id</param>
            <param name="feeId">EventFee id</param>
            <returns>True if successfuly deleted</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PostEventFee(System.String,CTCT.Components.EventSpot.EventFee)">
            <summary>
            Create an individual event fee
            </summary>
            <param name="eventId">Event id</param>
            <param name="eventFee">EventFee object</param>
            <returns>The newly created EventFee</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetAllPromocodes(System.String)">
            <summary>
            Retrieve all existing promo codes for an event
            </summary>
            <param name="eventId">Event id</param>
            <returns>A list of Promocode</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetPromocode(System.String,System.String)">
            <summary>
            Retrieve an existing promo codes for an event
            </summary>
            <param name="eventId">Event id</param>
            <param name="promocodeId">Promocode id</param>
            <returns>The Promocode object</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PostPromocode(System.String,CTCT.Components.EventSpot.Promocode)">
            <summary>
            Create a new promo code for an event
            </summary>
            <param name="eventId">Event id</param>
            <param name="promocode">Promocode object to be created</param>
            <returns>The newly created Promocode</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PutPromocode(System.String,System.String,CTCT.Components.EventSpot.Promocode)">
            <summary>
            Update a promo code for an event
            </summary>
            <param name="eventId">Event id</param>
            <param name="promocodeId">Promocode id</param>
            <param name="promocode">The new Promocode values</param>
            <returns>The newly updated Promocode</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.DeletePromocode(System.String,System.String)">
            <summary>
            Delete a promo code for an event
            </summary>
            <param name="eventId">Event id</param>
            <param name="promocodeId">Promocode id</param>
            <returns>True if successfuly deleted</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetRegistrant(System.String,System.String)">
            <summary>
            Retrieve detailed information for a specific event registrant
            </summary>
            <param name="eventId">Event id</param>
            <param name="registrantId">Redistrant id</param>
            <returns>Registrant details</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetAllRegistrants(System.String,System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Retrieve a list of registrants for the specified event
            </summary>
            <param name="eventId">Event id</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 50</param>
            <param name="pag">Pagination object</param>
            <returns>ResultSet containing a results array of Registrant</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetAllEventItems(System.String)">
            <summary>
            Retrieve all existing items associated with an event
            </summary>
            <param name="eventId">Event id</param>
            <returns>A list of EventItem</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetEventItem(System.String,System.String)">
            <summary>
             Retrieve specific event item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">Eventitem id</param>
            <returns>EventItem object</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PutEventItem(System.String,System.String,CTCT.Components.EventSpot.EventItem)">
            <summary>
             Update a specific event item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <param name="eventItem">The newly values for EventItem</param>
            <returns>The updated EventItem</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PostEventItem(System.String,CTCT.Components.EventSpot.EventItem)">
            <summary>
             Create a specific event item
            </summary>
            <param name="eventId">Event id</param>
            <param name="eventItem">EventItem id</param>
            <returns>The newly created EventItem</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.DeleteEventItem(System.String,System.String)">
            <summary>
            Delete a specific event item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <returns>True if successfuly deleted</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PostEventItemAttribute(System.String,System.String,CTCT.Components.EventSpot.Attribute)">
            <summary>
            Create an attributes for an item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <param name="attribute">The Attribute object</param>
            <returns>The newly created attribure</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.PutEventItemAttribute(System.String,System.String,System.String,CTCT.Components.EventSpot.Attribute)">
            <summary>
            Updates an existing attributes for an item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <param name="attributeId">Attribute id</param>
            <param name="attribute">Attribute new values</param>
            <returns>The newly updated attribute</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetEventItemAttribute(System.String,System.String,System.String)">
            <summary>
            Retrieve an existing attributes for an item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <param name="attributeId">Attribute id</param>
            <returns>Attribute object</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.GetAllEventItemAttributes(System.String,System.String)">
            <summary>
            Retrieve all existing attributes for an item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <returns>A list of Attributes</returns>
        </member>
        <member name="M:CTCT.Services.IEventSpotService.DeleteEventItemAttribute(System.String,System.String,System.String)">
            <summary>
            Delete an existing attributes for an item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <param name="attributeId">Attribute id</param>
            <returns>True if successfuly deleted</returns>
        </member>
        <member name="P:CTCT.Settings.Endpoints.BaseUrl">
            <summary>
            API access URL.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.Activity">
            <summary>
            Access an activity.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.Activities">
            <summary>
            List activities.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ExportContactsActivity">
            <summary>
            Export contacts linked to an activity.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ClearListsActivity">
            <summary>
            Clear the list of activities.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.RemoveFromListsActivity">
            <summary>
            Remove from list.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.AddContactsActivity">
            <summary>
            Add contacts to activities.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.Contact">
            <summary>
            Access a contact.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.Contacts">
            <summary>
            Get all contacts.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.Lists">
            <summary>
            Get all lists.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.List">
            <summary>
            Access a specified list.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ListContacts">
            <summary>
            Get the list of contacts from a list.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactLists">
            <summary>
            Get contact lists.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactList">
            <summary>
            Get a list from contact lists.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.Campaigns">
            <summary>
            Get campaigns.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.Campaign">
            <summary>
            Access a campaign
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignSchedules">
            <summary>
            Campaign schedules.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignSchedule">
            <summary>
            Campaign schedule.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignTestSends">
            <summary>
            Campaign test sends.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignTrackingSummary">
            <summary>
            Campaign tracking summary.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignTrackingBounces">
            <summary>
            Campaign tracking bounces.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignTrackingClicks">
            <summary>
            Campaign tracking clicks.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignTrackingClicksForLink">
            <summary>
            Campaign tracking clicks for a specific link.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignTrackingForwards">
            <summary>
            Campaign tracking forwards.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignTrackingOpens">
            <summary>
            Campaign tracking opens.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignTrackingSends">
            <summary>
            Campaign tracking sends.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignTrackingUnsubscribes">
            <summary>
            Campaign tracking unsubscribes.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.CampaignTrackingLink">
            <summary>
            Campaign tracking link.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactTrackingActivities">
            <summary>
            Contact tracking activities.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactTrackingEmailCampaignActivities">
            <summary>
            Contact tracking activities by email campaign.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactTrackingSummary">
            <summary>
            Contact tracking summary.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactTrackingBounces">
            <summary>
            Contact tracking bounces.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactTrackingClicks">
            <summary>
            Contact tracking clicks.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactTrackingForwards">
            <summary>
            Contact tracking forwards.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactTrackingOpens">
            <summary>
            Contact tracking opens.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactTrackingSends">
            <summary>
            Contact tracking sends.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactTrackingUnsubscribes">
            <summary>
            Contact tracking unsubscribes.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ContactTrackingLink">
            <summary>
            Contact tracking link.
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.AccountVerifiedEmailAddressess">
            <summary>
            Account verified email addresses link
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.AccountSummaryInformation">
            <summary>
            Account Summary Information
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.MyLibraryInfo">
            <summary>
            MyLibrary information
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.MyLibraryFolders">
            <summary>
            MyLibrary folders
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.MyLibraryFolder">
            <summary>
            Access a specified folder
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.MyLibraryTrash">
            <summary>
            Files in Trash folder
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.MyLibraryFiles">
            <summary>
            MyLibrray files
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.MyLibraryFile">
            <summary>
            MyLibrary file
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.MyLibraryFolderFiles">
            <summary>
            MyLibrary files for a specific folder
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.MyLibraryFileUploadStatus">
            <summary>
            MyLibrary file upload status
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.EventSpots">
            <summary>
            EventSpot Events Collection Endpoint
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.EventFees">
            <summary>
            Individual Event Fees Endpoint
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.EventPromocode">
            <summary>
            Individual Promocode Endpoint
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.EventRegistrant">
            <summary>
            Individual Event Registrant Endpoint
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.EventItem">
            <summary>
            Event Item Endpoint
            </summary>
        </member>
        <member name="P:CTCT.Settings.Endpoints.ItemAttribute">
            <summary>
            Item Attribute Endpoint
            </summary>
        </member>
        <member name="T:CTCT.Util.HttpProcessor">
            <summary>
            Low-level Class responsible with HTTP requests in Constant Contact.
            </summary>
        </member>
        <member name="T:CTCT.Util.ProcessorBase">
            <summary>
            Processor Constants in Constant Contact.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.CONTENT_TYPE_HEADER">
            <summary>
            Content-Type header.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.CONTENT_LENGTH_HEADER">
            <summary>
            Content-Length header.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.ACCEPT_HEADER">
            <summary>
            Accept header.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.AUTHORIZATION_HEADER">
            <summary>
            Authorization header.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.X_CTCT_REQUEST_SOURCE_HEADER">
            <summary>
            Constant Contact request source header
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.JSON_CONTENT_TYPE">
            <summary>
            constant for "application/json" content type
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.MULTIPART_CONTENT_TYPE">
            <summary>
            constant for "multipart/form-data" content type
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.MULTIPART_BOUNDARY">
            <summary>
            The boundary we will use in our multipart requests
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.BOUNDARY_CONTENT_TYPE">
            <summary>
            constant for boundary content type. Used with multipart after a semicolon
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.SPACE">
            <summary>
            A single Space
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.LOCATION_HEADER">
            <summary>
            Location header.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.LAST_REDIRECT_URL">
            <summary>
            last_redirect_url parameter.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.COOKIE_HEADER">
            <summary>
            Cookie header.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.COOKIE2_HEADER">
            <summary>
            Cookie2 header.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.VERSION1_VALUE">
            <summary>
            $Version=1 value.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.HOST_HEADER">
            <summary>
            Host header.
            </summary>
        </member>
        <member name="F:CTCT.Util.ProcessorBase.USER_AGENT_HEADER">
            <summary>
            User-Agent header.
            </summary>
        </member>
        <member name="M:CTCT.Util.HttpProcessor.HttpRequest(System.String,CTCT.Util.HttpMethod,CTCT.Util.IContentType,System.String,System.String,System.String)">
            <summary>
            Convenience method that automatically converts from Strings to bytes before calling makeHttpRequest.
            </summary>
            <param name="url">Url</param>
            <param name="method">Method</param>
            <param name="contentType">ContentType</param>
            <param name="accessToken">AccessToken</param>
            <param name="apiKey">ApiKey</param>
            <param name="data">Data if any</param>
            <returns>RawApiResponse</returns>
        </member>
        <member name="M:CTCT.Util.HttpProcessor.HttpRequest(System.String,CTCT.Util.HttpMethod,CTCT.Util.IContentType,System.String,System.String,System.Byte[])">
            <summary>
            Makes a HTTP request to the Endpoint specified in urlParam and using the HTTP method specified by httpMethod.
            </summary>
            <param name="url">Url</param>
            <param name="method">Method</param>
            <param name="contentType">ContentType</param>
            <param name="accessToken">AccessToken</param>
            <param name="apiKey">ApiKey</param>
            <param name="data">Data if any</param>
            <returns>RawApiResponse</returns>
        </member>
        <member name="M:CTCT.Util.HttpProcessor.GetWrapperAssemblyVersion">
            <summary>
            Get the wrapper version
            </summary>
            <returns>Wrapper version</returns>
        </member>
        <member name="T:CTCT.Util.PatchRequest">
            <summary>
            Used PATCH method
            </summary>
        </member>
        <member name="M:CTCT.Util.PatchRequest.#ctor(System.String,System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="op">The operation to perform </param>
            <param name="path">Where in the object to perform it</param>
            <param name="value">The new value to write</param>
        </member>
        <member name="P:CTCT.Util.PatchRequest.Op">
            <summary>
            The operation to perform 
            </summary>
        </member>
        <member name="P:CTCT.Util.PatchRequest.Path">
            <summary>
            Where in the object to perform it
            </summary>
        </member>
        <member name="P:CTCT.Util.PatchRequest.Value">
            <summary>
            The new value to write
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.EventFee">
            <summary>
            EventFee class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventFee.EarlyFee">
            <summary>
            Fee for registrations that occur prior to the event's early_fee_date 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventFee.Fee">
            <summary>
            The fee amount 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventFee.FeeScopeString">
            <summary>
            String representation Specifies who the fee applies to
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventFee.FeeScope">
            <summary>
            Specifies who the fee applies to
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventFee.Id">
            <summary>
            Unique ID for that fee 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventFee.Label">
            <summary>
            Fee description displayed to event registrants 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventFee.LateFee">
            <summary>
            Fee for registrations that occur after the event's late_fee_date 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventFee.HasRestrictedAccess">
            <summary>
            Has restricted access
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.FeeScope">
            <summary>
            Specifies who the fee applies to
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.FeeScope.BOTH">
            <summary>
            Fee applies to Registrants and Guests
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.FeeScope.REGISTRANTS">
            <summary>
            Fee applies to registrants only
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.FeeScope.GUESTS">
            <summary>
            Fee applies to guests only
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.EventItem">
            <summary>
            EventItem class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventItem.Attributes">
            <summary>
            An array of item attributes and options 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventItem.DefaultQuantityAvailable">
            <summary>
            Number of items available for sale, displayed on the registration page if show_quantity_available = true. 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventItem.DefaultQuantityTotal">
            <summary>
            The total quantity of items offered for sale, minimum = 0, cannot leave blank. 
            If the item has attributes, the summation of the quantity_total for all attributes automatically overwrites the value you enter here. 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventItem.Description">
            <summary>
            The item description that is shown on the registration page
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventItem.Id">
            <summary>
            The items unique ID 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventItem.Name">
            <summary>
            Item name that is shown on the registration page 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventItem.PerRegistrantLimit">
            <summary>
            The maximum quantity of this item that a registrant, as well as any of their guests, can purchase, minimum = 0, cannot leave blank; value cannot be greater than the value of default_quantity_available 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventItem.Price">
            <summary>
            The item cost, minimum = 0.00 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.EventItem.ShowQuantityAvailable">
            <summary>
            If true, displays the remaining quantity of this item for purchase on the registration page 
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.Fee">
            <summary>
            Fee class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Fee.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Fee.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Fee.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Fee.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Fee.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Fee.FeePeriodType">
            <summary>
            Fee period type
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Fee.PromoType">
            <summary>
            Amount paid
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.Field">
            <summary>
            Field class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Field.TypeString">
            <summary>
            String representation of the type value
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Field.FieldType">
            <summary>
            Type of the value
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Field.Name">
            <summary>
            Name of the field 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Field.Label">
            <summary>
            Field label displayed to viewers 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Field.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.Order">
            <summary>
            Order class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Order.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Order.Fees">
            <summary>
            Fees list
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Order.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Order.CurrencyType">
            <summary>
            Currency type
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Order.OrderDateString">
            <summary>
            String representation Order date
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Order.OrderDate">
            <summary>
            Order date
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.PaymentPromoCode">
            <summary>
            PaymentPromoCode class
            </summary>
        </member>
        <member name="M:CTCT.Components.EventSpot.PaymentPromoCode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PaymentPromoCode.TotalDiscount">
            <summary>
            Total discount
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PaymentPromoCode.PromoCodeInfo">
            <summary>
            Promo code info
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.PaymentSummary">
            <summary>
            Payment summary
            </summary>
        </member>
        <member name="M:CTCT.Components.EventSpot.PaymentSummary.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PaymentSummary.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PaymentSummary.PaymentStatus">
            <summary>
            Payment status
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PaymentSummary.PaymentType">
            <summary>
            Payment type
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PaymentSummary.PromoCode">
            <summary>
            Promo code
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.PromoCodeInfo">
            <summary>
            PromoCodeInfo class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PromoCodeInfo.CodeName">
            <summary>
            Code name
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PromoCodeInfo.CodeTypeString">
            <summary>
            String representation Code type
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PromoCodeInfo.CodeType">
            <summary>
            Code type
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PromoCodeInfo.RedemptionCount">
            <summary>
            Redemption count
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PromoCodeInfo.DiscountPercent">
            <summary>
            Discount percent
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PromoCodeInfo.DiscountAmount">
            <summary>
            Discount amount 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PromoCodeInfo.DiscountTypeString">
            <summary>
            Discount types
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PromoCodeInfo.DiscountType">
            <summary>
            Discount types
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.PromoCodeInfo.DiscountScope">
            <summary>
            Discount scope
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.Registrant">
            <summary>
            Registrant class
            </summary>
        </member>
        <member name="M:CTCT.Components.EventSpot.Registrant.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.Guests">
            <summary>
            Contains all the guest information fields and values, 
            entered by the registrant on the event registration page.
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.Sections">
            <summary>
            Sections
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.TicketId">
            <summary>
            Ticket id
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.RegistrationDateString">
            <summary>
            String representation of date the registrant registered for the event
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.RegistrationDate">
            <summary>
            Date the registrant registered for the event
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.PaymentSummary">
            <summary>
            Payment summary
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.FirstName">
            <summary>
            First name
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.LastName">
            <summary>
            Last name
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.PaymentStatus">
            <summary>
            Payment status
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.RegistrationStatus">
            <summary>
            Registration status
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.UpdatedDateString">
            <summary>
            String representation of update date
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Registrant.UpdatedDate">
            <summary>
            Update date
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.IndividualEvent">
            <summary>
            IndividualEvent class
            </summary>
        </member>
        <member name="M:CTCT.Components.EventSpot.IndividualEvent.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.ActiveDateString">
            <summary>
            String representation of date event was published or announced, in ISO-8601 format
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.ActiveDate">
            <summary>
            Date event was published or announced
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.AreRegistrantsPublic">
            <summary>
            Set to true allows registrants to view others who have registered for the event, Default is false 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.CancelledDateString">
            <summary>
            Date the event was cancelled in ISO-8601 format
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.CancelledDate">
            <summary>
            Date the event was cancelled
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.CreatedDateString">
            <summary>
            String representation Date the event was created in ISO-8601 format
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.CreatedDate">
            <summary>
            Date the event was created
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.CurrencyType">
            <summary>
            Currency that the account will be paid in; although this is not a required field, it has a default value of USD.
            Valid values are: USD, CAD, AUD, CHF, CZK, DKK, EUR, GBP, HKD, HUF, ILS, JPY, MXN, NOK, NZD, PHP, PLN, SEK, SGD, THB, TWD 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.DeletedDateString">
            <summary>
            String representation Date the event was deleted in ISO-8601 format 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.DeletedDate">
            <summary>
            Date the event was deleted
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.Description">
            <summary>
            Provide a brief description of the event that will be visible on the event registration form and landing page 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.EndDateString">
            <summary>
            String representation of the event end date, in ISO-8601 format
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.EndDate">
            <summary>
            The event end date
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.GoogleAnalyticsKey">
            <summary>
            Enter the Google analytics key if being used to track the event registration homepage 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.GoogleMerchantId">
            <summary>
            Google merchant id to which payments are made; Google Checkout is not supported for new events, only valid on events created prior to October 2013
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.Id">
            <summary>
            Unique ID of the event 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.IsCalendarDisplayed">
            <summary>
            Set to true to display the event on the account's calendar; Default = true 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.IsCheckinAvailable">
            <summary>
            Set to true to enable registrant check-in, and indicate that the registrant attended the event; Default is false 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.IsHomePageDisplayed">
            <summary>
            Indicates if the event home/landing page is displayed for the event; set to true only if a landing page has been created for the event; Default is false 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.IsListedInExternalDirectory">
            <summary>
            Set to true to publish the event in external event directories such as SocialVents and EventsInAmerica; Default is false 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.IsMapDisplayed">
            <summary>
            For future usage, Default = true 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.IsVirtualEvent">
            <summary>
            Set to true if this is an online event; Default is false 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.Location">
            <summary>
            Name of the venue or Location at which the event is being held 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.MetaDataTags">
            <summary>
            Specify keywords to improve search engine optimization (SEO) for the event; use commas to separate multiple keywords 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.Name">
            <summary>
            The event filename - not visible to registrants 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.PayableTo">
            <summary>
            Name to which registrants paying by check must make checks payable to; REQUIRED if 'CHECK' is selected as a payment option 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.PaypalAccountEmail">
            <summary>
            Email address linked to PayPal account to which payments will be made. REQUIRED if 'PAYPAL' is selected as a payment option 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.RegistrationUrl">
            <summary>
            The URL for the event registration form 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.StartDateString">
            <summary>
            String representation of the event start date, in ISO-8601 format
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.StartDate">
            <summary>
            The event start date
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.StatusString">
            <summary>
            String representation of the event status
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.Status">
            <summary>
            The event status
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.ThemeName">
            <summary>
            The background and color theme for the event invitation, home page, and Registration form; default is Default 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.TimeZoneDescription">
            <summary>
            Specify additional text to help describe the event time zone
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.TimeZoneId">
            <summary>
            Time zone in which the event occurs
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.Title">
            <summary>
            The event title, visible to registrants 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.TotalRegisteredCount">
            <summary>
            Number of event registrants 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.TwitterHashTag">
            <summary>
            The event's Twitter hashtag 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.TypeString">
            <summary>
            String representation of the event type
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.Type">
            <summary>
            The event type
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.UpdatedDateString">
            <summary>
            String representation of the date the event was updated in ISO-8601 format
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.UpdatedDate">
            <summary>
            Date the event was updated
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.EventDetailUrl">
            <summary>
            URI that points to the detailed description of that event
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.Address">
            <summary>
            Address specifying the event location, used to determine event location on map if is_map_displayed set to true
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.Contact">
            <summary>
            The event host's contact information 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.NotificationOptions">
            <summary>
            Define whether or not event notifications are sent to the contact email_address, and which notifications. 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.OnlineMeeting">
            <summary>
            Online meeting details, REQUIRED if is_virtual_event is set to true 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.PaymentAddress">
            <summary>
            Address to which checks will be sent. REQUIRED if CHECK is selected as a payment option 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.TrackInformation">
            <summary>
            Use these settings to define the information displayed on the Event registration page 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.PaymentOptionsArray">
            <summary>
            Specifies the payment options available to registrants 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.IndividualEvent.PaymentOptions">
            <summary>
            Specifies the payment options available to registrants 
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.EventStatus">
            <summary>
            Event status
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventStatus.DRAFT">
            <summary>
            Draft.
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventStatus.ACTIVE">
            <summary>
            Active.
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventStatus.COMPLETE">
            <summary>
            Complete.
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventStatus.CANCELLED">
            <summary>
            Cancelled.
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventStatus.DELETED">
            <summary>
            Deleted
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.AUCTION">
            <summary>
            Auction
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.BIRTHDAY">
            <summary>
            Birthday
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.BUSINESS_FINANCE_SALES">
            <summary>
            Business finance sales
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.CLASSES_WORKSHOPS">
            <summary>
            Classes workshops
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.COMPETITION_SPORTS">
            <summary>
            Competition sports
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.CONFERENCES_SEMINARS_FORUM">
            <summary>
            Confereces seminars forum
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.CONVENTIONS_TRADESHOWS_EXPOS">
            <summary>
            Conventions tradeshows expos
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.FESTIVALS_FAIRS">
            <summary>
            Festivals fairs
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.FOOD_WINE">
            <summary>
            Food wine
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.FUNDRAISERS_CHARITIES">
            <summary>
            Fundraisers charities
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.HOLIDAY">
            <summary>
            Holiday
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.INCENTIVE_REWARD_RECOGNITION">
            <summary>
            Incentive reward recognition
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.MOVIES_FILM">
            <summary>
            Movies film
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.MUSIC_CONCERTS">
            <summary>
            Music concerts
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.NETWORKING_CLUBS">
            <summary>
            Networking clubs
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.PERFORMING_ARTS">
            <summary>
            Performing arts
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.OUTDOORS_RECREATION">
            <summary>
            Outdoors recreation
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.RELIGION_SPIRITUALITY">
            <summary>
            Religion spirituality
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.SCHOOLS_REUNIONS_ALUMNI">
            <summary>
            School reunions alumni
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.PARTIES_SOCIAL_EVENTS_MIXERS">
            <summary>
            Parties social events mixers
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.TRAVEL">
            <summary>
            Travel
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.WEBINAR_TELESEMINAR_TELECLASS">
            <summary>
            Webinar teleseminar teleclass
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.WEDDINGS">
            <summary>
            Weddings
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.EventType.OTHER">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.PaymentTypes">
            <summary>
            Payment Types
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.PaymentTypes.ONLINE_CREDIT_CARD_PROCESSOR">
            <summary>
            Online credit card processor
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.PaymentTypes.PAYPAL">
            <summary>
            Paypal
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.PaymentTypes.GOOGLE_CHECKOUT">
            <summary>
            Google checkout
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.PaymentTypes.CHECK">
            <summary>
            Check
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.PaymentTypes.DOOR">
            <summary>
            Door
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.NotificationOptions">
            <summary>
            NotificationOptions class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.NotificationOptions.IsOptedIn">
            <summary>
            Set to true to send event notifications to the contact email_address, false for no notifications; Default is false 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.NotificationOptions.NotificationTypeString">
            <summary>
            String representation of the type of notifications sent to the contact email_address, valid values: SO_REGISTRATION_NOTIFICATION - send notice for each registration (Default) 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.NotificationOptions.NotificationType">
            <summary>
            Specifies the type of notifications sent to the contact email_address
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.NotificationType">
            <summary>
            Specifies the type of notifications sent to the contact email_address
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.NotificationType.SO_REGISTRATION_NOTIFICATION">
            <summary>
            So registrant notification
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.OnlineMeeting">
            <summary>
            OnlineMeeting class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.OnlineMeeting.Instructions">
            <summary>
            Online meeting instructions, such as dial in number, password, etc 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.OnlineMeeting.ProviderMeetingId">
            <summary>
            Meeting ID, if any, for the meeting 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.OnlineMeeting.ProviderType">
            <summary>
            Specify the online meeting provider, such as WebEx 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.OnlineMeeting.Url">
            <summary>
            URL for online meeting. REQUIRED if is_virtual_event is set to true
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.Promocode">
            <summary>
            Promocode class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.CodeName">
            <summary>
            Name of the promotional code visible to registrants, between 4 - 12 characters, cannot contain spaces or special character (_ is OK); each code_name must be unique 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.CodeTypeString">
            <summary>
             Type of promocode:
             ACCESS - applies to a specific fee with has_restricted_access = true, fee_list must include only a single fee_id. See Event Fees
             DISCOUNT - when set to DISCOUNT, you must specify either a discount_percent or a discount_amount
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.CodeType">
            <summary>
             Type of promocode:
             ACCESS - applies to a specific fee with has_restricted_access = true, fee_list must include only a single fee_id. See Event Fees
             DISCOUNT - when set to DISCOUNT, you must specify either a discount_percent or a discount_amount
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.DiscountAmount">
            <summary>
            Specifies a fixed discount amount, minimum of 0.01, is required when code_type = DISCOUNT, but not using discount_percent
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.DiscountPercent">
            <summary>
            Specifies a discount percentage, from 1% - 100%, is required when code_type = DISCOUNT, but not using discount_amount
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.DiscountScopeString">
            <summary>
             Required when code_type = DISCOUNT;
             FEE_LIST - discount is applied only to those fees listed in the fee_ids array ORDER_TOTAL - discount is applied to the order total
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.DiscountScope">
            <summary>
             Required when code_type = DISCOUNT;
             FEE_LIST - discount is applied only to those fees listed in the fee_ids array ORDER_TOTAL - discount is applied to the order total
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.DiscountTypeString">
            <summary>
            Discount types
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.DiscountType">
            <summary>
            Discount types
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.FeeIds">
            <summary>
            Identifies the fees to which the promocode applies; 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.Id">
            <summary>
            Unique ID for the event promotional code 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.IsPaused">
            <summary>
            When set to true, promocode cannot be redeemed; when false, promocode can be redeemed; default = false
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.QuantityAvailable">
            <summary>
            Number of promocodes available for redemption; -1 = unlimited 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.QuantityTotal">
            <summary>
            Total number of promocodes available for redemption; -1 = unlimited
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.QuantityUsed">
            <summary>
            Number of promocodes that have been redeemed; starts at 0
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.StatusString">
            <summary>
            Status of the promocode
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Promocode.Status">
            <summary>
            Status of the promocode
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.CodeType">
            <summary>
            Type of promocode
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.CodeType.ACCESS">
            <summary>
            applies to a specific fee with has_restricted_access = true, fee_list must include only a single fee_id. See Event Fees
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.CodeType.DISCOUNT">
            <summary>
            when set to DISCOUNT, you must specify either a discount_percent or a discount_amount
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.DiscountScope">
            <summary>
            Discount Scope
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.DiscountScope.FEE_LIST">
            <summary>
             discount is applied only to those fees listed in the fee_ids array
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.DiscountScope.ORDER_TOTAL">
            <summary>
            discount is applied to the order total
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.DiscountType">
            <summary>
            Discount Type
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.DiscountType.PERCENT">
            <summary>
            discount is a percentage specified by discount_percent
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.DiscountType.AMOUNT">
            <summary>
            discount is a fixed amount, specified by discount_amount
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.PromocodeStatus">
            <summary>
            Promocode Status
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.PromocodeStatus.LIVE">
            <summary>
            promocode is available to be redeemed
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.PromocodeStatus.PAUSED">
            <summary>
            promocode is not available for redemption
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.PromocodeStatus.DEPLETED">
            <summary>
            no more promocodes remain, 
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.SaleItem">
            <summary>
            SaleItem class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.SaleItem.Amount">
            <summary>
            Amount paid
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.SaleItem.Id">
            <summary>
            Fee ID 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.SaleItem.PromoType">
            <summary>
            Amount paid
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.SaleItem.Name">
            <summary>
            Name of registrant or guest 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.SaleItem.Quantity">
            <summary>
            Number of amount required
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.SaleItem.Type">
            <summary>
            Type of fees 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.SaleItem.FeePeriodType">
            <summary>
            Fee period type
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.Section">
            <summary>
            Section class
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Section.Label">
            <summary>
            Field label displayed to viewers 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.Section.Fields">
            <summary>
             An array of the fields displayed in a section: field_type, name, label, value, values
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.FieldType">
            <summary>
            Field type
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.FieldType.single_value">
            <summary>
            single value
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.FieldType.multiple_values">
            <summary>
            multiple value
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.TrackInformation">
            <summary>
            TrackInformation class
            </summary>
        </member>
        <member name="M:CTCT.Components.EventSpot.TrackInformation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.EarlyFeeDateString">
            <summary>
            Date on which early fees end, in ISO-8601 format 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.EarlyFeeDate">
            <summary>
            Date on which early fees end
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.GuestDisplayLabel">
            <summary>
            Default = Guest(s); How guests are referred to on the registration form; use your own, or one of the following suggestions are 
            Associate(s), Camper(s), Child(ren), Colleague(s), Employee(s), Friend(s), Guest(s), Member(s), Participant(s), Partner(s), Player(s), Spouse(s), Student(s), Teammate(s), Volunteer(s) 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.GuestLimit">
            <summary>
            Number of guests each registrant can bring, 0 - 100, default = 0 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.IsGuestAnonymousEnabled">
            <summary>
            Default = false; Set to true to display the guest count field on the registration form; if true, is_guest_name_required must be set to false (default)
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.IsGuestNameRequired">
            <summary>
            Default = false. Set to display guest name fields on registration form; if true, then is_guest_anonymous_enabled must be set false (default)
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.IsRegistrationClosedManually">
            <summary>
            Default = false; Manually closes the event registration when set to true, takes precedence over registration_limit_date and registration_limit_count settings 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.IsTicketingLinkDisplayed">
            <summary>
            Default = false; Set to true provide a link for registrants to retrieve an event ticket after they register
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.LateFeeDateString">
            <summary>
            String representation of the date after which late fees apply, in ISO-8601 format 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.LateFeeDate">
            <summary>
            Date after which late fees apply
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.RegistrationLimitCount">
            <summary>
            Specifies the maximum number of registrants for the event 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.RegistrationLimitDateString">
            <summary>
            String representation of the date when event registrations close, in ISO-8601 format 
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.RegistrationLimitDate">
            <summary>
            Date when event registrations close
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.InformationSectionsArray">
            <summary>
             Determines if the Who (CONTACT), When (TIME), or Where (LOCATION) information is shown on the Event page. Default settings are CONTACT, TIME, and LOCATION 
             valid values are: CONTACT - displays the event contact informationTIME - displays the event date and time
             LOCATION - displays the event location
            </summary>
        </member>
        <member name="P:CTCT.Components.EventSpot.TrackInformation.InformationSections">
            <summary>
             Determines if the Who (CONTACT), When (TIME), or Where (LOCATION) information is shown on the Event page. Default settings are CONTACT, TIME, and LOCATION 
             valid values are: CONTACT - displays the event contact informationTIME - displays the event date and time
             LOCATION - displays the event location
            </summary>
        </member>
        <member name="T:CTCT.Components.EventSpot.InformationSections">
            <summary>
            InformationSection of TrackTnformation
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.InformationSections.CONTACT">
            <summary>
            displays the event contact information
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.InformationSections.TIME">
            <summary>
            displays the event date and time
            </summary>
        </member>
        <member name="F:CTCT.Components.EventSpot.InformationSections.LOCATION">
            <summary>
            displays the event location
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.BaseLibrary">
            <summary>
            Base class for MyLibrary
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.BaseLibrary.Id">
            <summary>
            Gets or sets the id
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.BaseLibrary.CreatedDate">
            <summary>
            Gets or sets the created date
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.BaseLibrary.ModifiedDate">
            <summary>
            Gets or sets the modified date
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.BaseLibrary.Name">
            <summary>
            Gets or sets the name of the library item
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.FileMoveResult">
            <summary>
            Represents a single File Move Result
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.FileMoveResult.Id">
            <summary>
            Gets or sets the id
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.FileMoveResult.Uri">
            <summary>
            Gets or sets the uri
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.FileUploadStatus">
            <summary>
            Represents a single Upload Status 
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.FileUploadStatus.FileId">
            <summary>
            Gets or setd the file id
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.FileUploadStatus.Description">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.FileUploadStatus.StatusString">
            <summary>
            Status, string representation.
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.FileUploadStatus.Status">
            <summary>
            Gets or sets the file status
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.MyLibraryFile">
            <summary>
            Represents a single MyLibrary File
            </summary>
        </member>
        <member name="M:CTCT.Components.MyLibrary.MyLibraryFile.#ctor">
            <summary>
            Class contructor
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.Description">
            <summary>
            Gets or sets the description of the file
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.FileTypeString">
            <summary>
            File type, string representation.
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.FileType">
            <summary>
            Gets or sets the source of the original file
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.Folder">
            <summary>
            Gets or sets the name of the folder the file is in
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.FolderId">
            <summary>
            Gets or sets the id of the folder the file is in
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.Height">
            <summary>
            Gets or sets the height in pixels of the image 
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.IsImage">
            <summary>
            Gets or sets whether the file is an image (true) or not (false)
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.Size">
            <summary>
            Gets or sets  the size of the file (in bytes) 
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.SourceString">
            <summary>
            Source, string representation.
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.Source">
            <summary>
            Gets or sets the source of the original file
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.StatusString">
            <summary>
            Status, string representation.
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.Status">
            <summary>
            Gets or sets the file status
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.Url">
            <summary>
            Gets or sets the url of the file
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.Width">
            <summary>
            Gets or sets the width (in pixels) of the image
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFile.Thumbnail">
            <summary>
            Gets or sets the thumbnail image of the file
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.FileType">
            <summary>
            File type enum
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileType.JPEG">
            <summary>
            JPEG file type
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileType.JPG">
            <summary>
            JPG file type
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileType.GIF">
            <summary>
            GIF file type
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileType.PDF">
            <summary>
            PDF file type
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileType.PNG">
            <summary>
            PNG file type
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.FileSource">
            <summary>
            File source enum
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileSource.MyComputer">
            <summary>
            Computer source
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileSource.StockImage">
            <summary>
            StockImage source
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileSource.Facebook">
            <summary>
            Facebook source - MyLibrary Plus customers only
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileSource.Instagram">
            <summary>
            Istagram source - MyLibrary Plus customers only
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileSource.Shutterstock">
            <summary>
            Shutterstock source
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileSource.Mobile">
            <summary>
            Mobile source
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.FileStatus">
            <summary>
            File status enum
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileStatus.Active">
            <summary>
            File is available for use
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileStatus.Processing">
            <summary>
            File is in the process of being uploaded to account
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileStatus.Uploaded">
            <summary>
            File has been uploaded, but not yet available for use
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileStatus.VirusFound">
            <summary>
            Virus scan during upload detected a virus, upload cancelled
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileStatus.Failed">
            <summary>
            File upload failed
            </summary>
        </member>
        <member name="F:CTCT.Components.MyLibrary.FileStatus.Deleted">
            <summary>
            File was deleted from MyLibrary
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.MyLibraryFolder">
            <summary>
            Represents a single MyLibrary Folder
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFolder.ItemCount">
            <summary>
            Gets or sets the number of files in the library folder
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFolder.Level">
            <summary>
            Gets or sets the level
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFolder.ParentId">
            <summary>
            Gets or sets the parent folder id
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryFolder.Children">
            <summary>
            Gets or sets the list of child or grandchild folders
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.MyLibraryInfo">
            <summary>
            Represents a MyLibrary Info data class
            </summary>
        </member>
        <member name="M:CTCT.Components.MyLibrary.MyLibraryInfo.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryInfo.ImageRoot">
            <summary>
            Gets or sets the image root
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryInfo.MaxFreeFileNum">
            <summary>
            Gets or sets the maximum number of free MyLibrary files
            If value = 0, refer to max_premium_space_limit for capacity
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryInfo.MaxPremiumSpaceLimit">
            <summary>
            Gets or sets the total amount of MyLibrary Plus storage space (in bytes)
            If value = 0, refer to max_free_file_num for capacity
            If value = -1, the account has unlimited storage
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryInfo.MaxUploadSizeLimit">
            <summary>
            Gets or sets the maximum file size (in bytes) that can be uploaded
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.MyLibraryInfo.UsageSummary">
            <summary>
            Gets or sets the usage data
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.Thumbnail">
            <summary>
            Represents a single Thumbnail in MyLibrary File class
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.Thumbnail.Url">
            <summary>
            Gets or sets the URL referencing the thumbnail of the file
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.Thumbnail.Height">
            <summary>
            Gets or sets the height in pixels
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.Thumbnail.Width">
            <summary>
            Gets or sets the width in pixels
            </summary>
        </member>
        <member name="T:CTCT.Components.MyLibrary.UsageSummary">
            <summary>
            Represents a Usage Summary in MyLibrary Info class
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.UsageSummary.DocumentBytesUsed">
            <summary>
            Gets or sets the total amount of storage space currently being consumed by document files (in bytes)
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.UsageSummary.DocumentCount">
            <summary>
            Gets or sets the total number of documents stored
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.UsageSummary.FileCount">
            <summary>
            Gets or sets the total number of files stored
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.UsageSummary.FolderCount">
            <summary>
            Gets or sets the total number of folders
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.UsageSummary.FreeFilesRemaining">
            <summary>
            Gets or sets the total number of free files
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.UsageSummary.ImageBytesUsed">
            <summary>
            Gets or sets the total amount of storage space being consumed by image files (in bytes)
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.UsageSummary.ImageCount">
            <summary>
            Gets or sets the total number of images stored
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.UsageSummary.TotalBytesRemaining">
            <summary>
            Gets or sets the total amount of storage space available (in bytes)
            </summary>
        </member>
        <member name="P:CTCT.Components.MyLibrary.UsageSummary.TotalBytesUsed">
            <summary>
            Gets or sets the total amount of storage space being used (in bytes)
            </summary>
        </member>
        <member name="T:CTCT.Components.ResultSet`1">
            <summary>
            Container for a get on a collection, such as Contacts, Campaigns, or TrackingData.
            </summary>
            <typeparam name="T">An object derived from Component class.</typeparam>
        </member>
        <member name="P:CTCT.Components.ResultSet`1.Results">
            <summary>
            Gets or sets the array of result objects returned.
            </summary>
        </member>
        <member name="P:CTCT.Components.ResultSet`1.Meta">
            <summary>
            Gets or sets the next link.
            </summary>
        </member>
        <member name="T:CTCT.Components.Meta">
            <summary>
            Meta class.
            </summary>
        </member>
        <member name="P:CTCT.Components.Meta.Pagination">
            <summary>
            Gets or sets the pagination link.
            </summary>
        </member>
        <member name="T:CTCT.Components.Pagination">
            <summary>
            Pagination class.
            </summary>
        </member>
        <member name="M:CTCT.Components.Pagination.GetNextUrl">
            <summary>
            Format the URL for the next page call.
            </summary>
            <returns>Returns the URL for the next page call.</returns>
        </member>
        <member name="P:CTCT.Components.Pagination.Next">
            <summary>
            Gets or sets the next link.
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.BaseActivity">
            <summary>
            Base class for activities.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.BaseActivity.ActivityType">
            <summary>
            Gets or sets the activity type.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.BaseActivity.CampaignId">
            <summary>
            Gets or sets the campaign id.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.BaseActivity.ContactId">
            <summary>
            Gets or sets the contact id.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.BaseActivity.EmailAddress">
            <summary>
            Gets or sets the email address.
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.ActivityType">
            <summary>
            Activity type enumeration.
            </summary>
        </member>
        <member name="F:CTCT.Components.Tracking.ActivityType.Bounce">
            <summary>
            Bounce activity.
            </summary>
        </member>
        <member name="F:CTCT.Components.Tracking.ActivityType.Click">
            <summary>
            Click activity.
            </summary>
        </member>
        <member name="F:CTCT.Components.Tracking.ActivityType.Forward">
            <summary>
            Forward activity.
            </summary>
        </member>
        <member name="F:CTCT.Components.Tracking.ActivityType.Open">
            <summary>
            Open activity.
            </summary>
        </member>
        <member name="F:CTCT.Components.Tracking.ActivityType.OptOut">
            <summary>
            OptOut activity.
            </summary>
        </member>
        <member name="F:CTCT.Components.Tracking.ActivityType.Send">
            <summary>
            Send activity.
            </summary>
        </member>
        <member name="F:CTCT.Components.Tracking.ActivityType.EMAIL_OPEN">
            <summary>
            Email open
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.BounceActivity">
            <summary>
            Represents a single Bounce Activity class.
            </summary>
        </member>
        <member name="M:CTCT.Components.Tracking.BounceActivity.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.BounceActivity.BounceCode">
            <summary>
            Gets or sets the bounce code.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.BounceActivity.BounceDescription">
            <summary>
            Gets or sets the bounce description.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.BounceActivity.BounceMessage">
            <summary>
            Gets or sets the bounce message.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.BounceActivity.BounceDate">
            <summary>
            Gets or sets the bounce date.
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.ClickActivity">
            <summary>
            Represents a Click Activity class.
            </summary>
        </member>
        <member name="M:CTCT.Components.Tracking.ClickActivity.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ClickActivity.LinkId">
            <summary>
            Gets or sets the link identification.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ClickActivity.ClickDate">
            <summary>
            Gets or sets the click date.
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.ContactActivity">
            <summary>
            Represents a Contact Activity class.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.OpenDateString">
            <summary>
            Gets or sets the open date.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.UnsubscribeDateString">
            <summary>
            Gets or sets the unsubscribe date
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.SendDateString">
            <summary>
            Gets or sets the send date
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.ForwardDateString">
            <summary>
            Gets or sets the forward date
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.Opens">
            <summary>
            Gets or sets the opens
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.LinkUri">
            <summary>
            Gets or sets the link uri
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.LinkId">
            <summary>
            Gets or sets the link id
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.Bounces">
            <summary>
            Gets or sets the bounces
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.UnsubscribeReason">
            <summary>
            Gets or sets the unsubscribe reason
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.Forwards">
            <summary>
            Gets or sets the forwards
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.BounceDescription">
            <summary>
            Gets or sets the bounce description
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.UnsubscribeSource">
            <summary>
            Gets or sets the unsubscribe source
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.BounceMessage">
            <summary>
            Gets or sets the bounce message
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.BounceCode">
            <summary>
            Gets or sets the bounce code
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.Clicks">
            <summary>
            Gets or sets the clicks
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.BounceDateString">
            <summary>
            Gets or sets the bounce date
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ContactActivity.ClickDateString">
            <summary>
            Gets or sets the click date
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.ForwardActivity">
            <summary>
            Represents a Forward Activity class.
            </summary>
        </member>
        <member name="M:CTCT.Components.Tracking.ForwardActivity.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.ForwardActivity.ForwardDate">
            <summary>
            Gets or sets the forward date.
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.OpenActivity">
            <summary>
            Represents an Open Activity class.
            </summary>
        </member>
        <member name="M:CTCT.Components.Tracking.OpenActivity.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.OpenActivity.OpenDate">
            <summary>
            Gets or sets the open date.
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.OptOutActivity">
            <summary>
            Represents a single OptOut Activity class.
            </summary>
        </member>
        <member name="M:CTCT.Components.Tracking.OptOutActivity.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.OptOutActivity.UnsubscribeDate">
            <summary>
            Gets or sets the unsubscribe date.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.OptOutActivity.UnsubscribeSource">
            <summary>
            Gets or sets the unsubscribe source.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.OptOutActivity.UnsubscribeReason">
            <summary>
            Gets or sets the unsubscribe reason.
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.SendActivity">
            <summary>
            Represents a Sent Activity class.
            </summary>
        </member>
        <member name="M:CTCT.Components.Tracking.SendActivity.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.SendActivity.SendDate">
            <summary>
            Gets or sets the send date.
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.TrackingActivity">
            <summary>
            Class to wrap a result set of individual activities (ie: OpensActivity, SendActivity).
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.TrackingActivity.Results">
            <summary>
            Gets or sets the list of activities.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.TrackingActivity.Next">
            <summary>
            Gets or sets the pagination array returned from a tracking endpoint.
            </summary>
        </member>
        <member name="T:CTCT.Components.Tracking.TrackingSummary">
            <summary>
            Represents a Tracking Summary class.
            </summary>
        </member>
        <member name="M:CTCT.Components.Tracking.TrackingSummary.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.TrackingSummary.Sends">
            <summary>
            Gets or sets the number of sends.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.TrackingSummary.Opens">
            <summary>
            Gets or sets the number of opens.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.TrackingSummary.Clicks">
            <summary>
            Gets or sets the number of clicks.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.TrackingSummary.Forwards">
            <summary>
            Gets or sets the number of forwards.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.TrackingSummary.Unsubscribes">
            <summary>
            Gets or sets the number of unsubscribes.
            </summary>
        </member>
        <member name="P:CTCT.Components.Tracking.TrackingSummary.Bounces">
            <summary>
            Gets or sets the number of bounces.
            </summary>
        </member>
        <member name="T:CTCT.Exceptions.CtctException">
            <summary>
            General exception.
            </summary>
        </member>
        <member name="M:CTCT.Exceptions.CtctException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CTCT.Exceptions.CtctException.#ctor(System.String)">
            <summary>
            Constructor used with a message.
            </summary>
            <param name="message">String message of exception.</param>
        </member>
        <member name="M:CTCT.Exceptions.CtctException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor used with a message and an inner exception.
            </summary>
            <param name="message">String message of exception.</param>
            <param name="inner">Reference to inner exception.</param>
        </member>
        <member name="M:CTCT.Exceptions.CtctException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used in serializing the data.
            </summary>
            <param name="info">Data stored to serialize/de-serialize</param>
            <param name="context">Defines the source/destinantion of the straeam.</param>
        </member>
        <member name="T:CTCT.Exceptions.IllegalArgumentException">
            <summary>
            Exception thrown if there is an illegal argument passed to a particular method.
            </summary>
        </member>
        <member name="M:CTCT.Exceptions.IllegalArgumentException.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:CTCT.Exceptions.IllegalArgumentException.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="T:CTCT.Exceptions.OAuth2Exception">
            <summary>
            Exception thrown if an error occured during OAuth2 authentication process.
            </summary>
        </member>
        <member name="M:CTCT.Exceptions.OAuth2Exception.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:CTCT.Exceptions.OAuth2Exception.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="T:CTCT.OAuth">
            <summary>
            Main class meant to be used by users to obtain access token by authenticating their app
            </summary>
        </member>
        <member name="M:CTCT.OAuth.AuthenticateFromWinProgram(System.String@)">
            <summary>
            Returns access token obtained after authenticating client app
            </summary>
            <param name="state">state query parameter</param>
            <returns>string representing access token if authentication succeded, null otherwise</returns>
        </member>
        <member name="M:CTCT.OAuth.AuthorizeFromWebApplication(System.Web.HttpContext,System.String)">
            <summary>
            Sends an authorization request to Constant Contact API
            (if access to application is granted, a code is send to Redirect URL field)
            (Redirect URL is one of web application url pages/methods)
            </summary>
            <param name="httpContext">current application context</param>
            <param name="state">state query parameter</param>
        </member>
        <member name="M:CTCT.OAuth.GetAccessTokenByCode(System.Web.HttpContext,System.String)">
            <summary>
            Request access token for an app key, client secret and authorization code
            </summary>
            <param name="httpContext">current application context</param>
            <param name="code">authorization code</param>
            <returns>access token</returns>
        </member>
        <member name="T:CTCT.AuthenticationRequest">
            <summary>
            AuthenticationRequest class.
            </summary>
        </member>
        <member name="P:CTCT.AuthenticationRequest.AccessToken">
            <summary>
            Activity id.
            </summary>
        </member>
        <member name="P:CTCT.AuthenticationRequest.ExpiresIn">
            <summary>
            Activity id.
            </summary>
        </member>
        <member name="P:CTCT.AuthenticationRequest.TokenType">
            <summary>
            Activity id.
            </summary>
        </member>
        <member name="T:CTCT.Services.AccountService">
            <summary>
            Performs all actions pertaining to getting list of verified email addresses
            </summary>
        </member>
        <member name="T:CTCT.Services.IAccountService">
            <summary>
            Interface for account service
            </summary>
        </member>
        <member name="M:CTCT.Services.IAccountService.GetVerifiedEmailAddress">
            <summary>
            Retrieve a list of all the account owner's email addresses
            </summary>
            <returns>list of all verified account owner's email addresses</returns>
        </member>
        <member name="M:CTCT.Services.IAccountService.GetAccountSummaryInformation">
            <summary>
            Get account summary information
            </summary>
            <returns>An AccountSummaryInformation object</returns>
        </member>
        <member name="M:CTCT.Services.IAccountService.PutAccountSummaryInformation(CTCT.Components.AccountService.AccountSummaryInformation)">
            <summary>
            Updates account summary information
            </summary>
            <param name="accountSumaryInfo">An AccountSummaryInformation object</param>
            <returns>An AccountSummaryInformation object</returns>
        </member>
        <member name="M:CTCT.Services.AccountService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            Account service constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.Services.AccountService.GetVerifiedEmailAddress">
            <summary>
            Retrieve a list of all the account owner's email addresses
            </summary>
            <returns>list of all verified account owner's email addresses</returns>
        </member>
        <member name="M:CTCT.Services.AccountService.GetAccountSummaryInformation">
            <summary>
            Get account summary information
            </summary>
            <returns>An AccountSummaryInformation object</returns>
        </member>
        <member name="M:CTCT.Services.AccountService.PutAccountSummaryInformation(CTCT.Components.AccountService.AccountSummaryInformation)">
            <summary>
            Updates account summary information
            </summary>
            <param name="accountSumaryInfo">An AccountSummaryInformation object</param>
            <returns>An AccountSummaryInformation object</returns>
        </member>
        <member name="T:CTCT.Services.ActivityService">
            <summary> 
            Performs all actions pertaining to scheduling Constant Contact Activities.
            </summary>
        </member>
        <member name="T:CTCT.Services.IActivityService">
            <summary>
            Interface for ActivityService class.
            </summary>
        </member>
        <member name="M:CTCT.Services.IActivityService.GetActivities">
            <summary>
            Get a list of activities.
            </summary>
            <returns>Returns the list of activities.</returns>
        </member>
        <member name="M:CTCT.Services.IActivityService.GetActivity(System.String)">
            <summary>
            Get an activity.
            </summary>
            <param name="activityId">The activity identification.</param>
            <returns>Returns the activity identified by its id.</returns>
        </member>
        <member name="M:CTCT.Services.IActivityService.CreateAddContactsActivity(CTCT.Components.Activities.AddContacts)">
            <summary>
            Create an Add Contacts Activity.
            </summary>
            <param name="addContacts">AddContacts object.</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.IActivityService.AddClearListsActivity(System.Collections.Generic.IList{System.String})">
            <summary>
            Create a Clear Lists Activity.
            </summary>
            <param name="lists">Array of list id's to be cleared.</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.IActivityService.AddExportContactsActivity(CTCT.Components.Activities.ExportContacts)">
            <summary>
            Create an Export Contacts Activity.
            </summary>
            <param name="exportContacts">Export contacts object.</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.IActivityService.AddRemoveContactsFromListsActivity(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Create a Remove Contacts From Lists Activity.
            </summary>
            <param name="emailAddresses">List of email addresses.</param>
            <param name="lists">List of id's.</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.IActivityService.AddContactstMultipartActivity(System.String,System.Byte[],System.Collections.Generic.IList{System.String})">
            <summary>
            Create an Add Contacts Multipart Activity.
            </summary>
            <param name="fileName">The file name to be imported</param>
            <param name="fileContent">The file content to be imported</param>
            <param name="lists">Array of list's id</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.IActivityService.RemoveContactsMultipartActivity(System.String,System.Byte[],System.Collections.Generic.IList{System.String})">
            <summary>
            Create a Remove Contacts Multipart Activity.
            </summary>
            <param name="fileName">The file name to be imported</param>
            <param name="fileContent">The file content to be imported</param>
            <param name="lists">Array of list's id</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.ActivityService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            Activity service constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.Services.ActivityService.GetActivities">
            <summary>
            Get a list of activities.
            </summary>
            <returns>Returns the list of activities.</returns>
        </member>
        <member name="M:CTCT.Services.ActivityService.GetActivity(System.String)">
            <summary>
            Get an activity.
            </summary>
            <param name="activityId">The activity identification.</param>
            <returns>Returns the activity identified by its id.</returns>
        </member>
        <member name="M:CTCT.Services.ActivityService.CreateAddContactsActivity(CTCT.Components.Activities.AddContacts)">
            <summary>
            Create an Add Contacts Activity.
            </summary>
            <param name="addContacts">AddContacts object.</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.ActivityService.AddClearListsActivity(System.Collections.Generic.IList{System.String})">
            <summary>
            Create a Clear Lists Activity.
            </summary>
            <param name="lists">Array of list id's to be cleared.</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.ActivityService.AddExportContactsActivity(CTCT.Components.Activities.ExportContacts)">
            <summary>
            Create an Export Contacts Activity.
            </summary>
            <param name="exportContacts">Export contacts object.</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.ActivityService.AddRemoveContactsFromListsActivity(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Create a Remove Contacts From Lists Activity.
            </summary>
            <param name="emailAddresses">List of email addresses.</param>
            <param name="lists">List of id's.</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.ActivityService.AddContactstMultipartActivity(System.String,System.Byte[],System.Collections.Generic.IList{System.String})">
            <summary>
             Create an Add Contacts Multipart Activity
            </summary>
            <param name="fileName">The file name to be imported</param>
            <param name="fileContent">The file content to be imported</param>
            <param name="lists">Array of list's id</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="M:CTCT.Services.ActivityService.RemoveContactsMultipartActivity(System.String,System.Byte[],System.Collections.Generic.IList{System.String})">
            <summary>
             Create a Remove Contacts Multipart Activity
            </summary>
            <param name="fileName">The file name to be imported</param>
            <param name="fileContent">The file content to be imported</param>
            <param name="lists">Array of list's id</param>
            <returns>Returns an Activity object.</returns>
        </member>
        <member name="T:CTCT.Services.UserServiceContext">
            <summary>
            User service context class
            </summary>
        </member>
        <member name="T:CTCT.Services.IUserServiceContext">
            <summary>
            User service context interface
            </summary>
        </member>
        <member name="P:CTCT.Services.IUserServiceContext.AccessToken">
            <summary>
            User access token
            </summary>
        </member>
        <member name="P:CTCT.Services.IUserServiceContext.ApiKey">
            <summary>
            Application api key
            </summary>
        </member>
        <member name="M:CTCT.Services.UserServiceContext.#ctor(System.String,System.String)">
            <summary>
            Account service constructor
            </summary>
            <param name="accessToken">Constant Contact OAuth2 access token.</param>
            <param name="apiKey">The API key for the application</param>
        </member>
        <member name="P:CTCT.Services.UserServiceContext.AccessToken">
            <summary>
            User access token
            </summary>
        </member>
        <member name="P:CTCT.Services.UserServiceContext.ApiKey">
            <summary>
            Application api key
            </summary>
        </member>
        <member name="T:CTCT.Services.CampaignScheduleService">
            <summary>
            Performs all actions pertaining to scheduling Constant Contact Campaigns.
            </summary>
        </member>
        <member name="T:CTCT.Services.ICampaignScheduleService">
            <summary>
            Interface for CampaignScheduleService class.
            </summary>
        </member>
        <member name="M:CTCT.Services.ICampaignScheduleService.AddSchedule(System.String,CTCT.Components.EmailCampaigns.Schedule)">
            <summary>
            Create a new schedule for a campaign.
            </summary>
            <param name="campaignId">Campaign id to be scheduled.</param>
            <param name="schedule">Schedule to be created.</param>
            <returns>Returns the schedule added.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignScheduleService.GetSchedules(System.String)">
            <summary>
            Get a list of schedules for a campaign.
            </summary>
            <param name="campaignId">Campaign id to be scheduled.</param>
            <returns>Returns the list of schedules for the specified campaign.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignScheduleService.GetSchedule(System.String,System.String)">
            <summary>
            Get a specific schedule for a campaign.
            </summary>
            <param name="campaignId">Campaign id to be get a schedule for.</param>
            <param name="scheduleId">Schedule id to retrieve.</param>
            <returns>Returns the requested schedule object.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignScheduleService.UpdateSchedule(System.String,CTCT.Components.EmailCampaigns.Schedule)">
            <summary>
            Update a specific schedule for a campaign.
            </summary>
            <param name="campaignId">Campaign id to be scheduled.</param>
            <param name="schedule">Schedule to retrieve.</param>
            <returns>Returns the updated schedule object.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignScheduleService.DeleteSchedule(System.String,System.String)">
            <summary>
            Get a specific schedule for a campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="scheduleId">Schedule id to delete.</param>
            <returns>Returns true if shcedule was successfully deleted.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignScheduleService.SendTest(System.String,CTCT.Components.EmailCampaigns.TestSend)">
            <summary>
            Send a test send of a campaign.
            </summary>
            <param name="campaignId">Id of campaign to send test of.</param>
            <param name="testSend">Test send details.</param>
            <returns>Returns the sent test object.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignScheduleService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            Campaign schedule service constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.Services.CampaignScheduleService.AddSchedule(System.String,CTCT.Components.EmailCampaigns.Schedule)">
            <summary>
            Create a new schedule for a campaign.
            </summary>
            <param name="campaignId">Campaign id to be scheduled.</param>
            <param name="schedule">Schedule to be created.</param>
            <returns>Returns the schedule added.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignScheduleService.GetSchedules(System.String)">
            <summary>
            Get a list of schedules for a campaign.
            </summary>
            <param name="campaignId">Campaign id to be scheduled.</param>
            <returns>Returns the list of schedules for the specified campaign.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignScheduleService.GetSchedule(System.String,System.String)">
            <summary>
            Get a specific schedule for a campaign.
            </summary>
            <param name="campaignId">Campaign id to be get a schedule for.</param>
            <param name="scheduleId">Schedule id to retrieve.</param>
            <returns>Returns the requested schedule object.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignScheduleService.UpdateSchedule(System.String,CTCT.Components.EmailCampaigns.Schedule)">
            <summary>
            Update a specific schedule for a campaign.
            </summary>
            <param name="campaignId">Campaign id to be scheduled.</param>
            <param name="schedule">Schedule to retrieve.</param>
            <returns>Returns the updated schedule object.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignScheduleService.DeleteSchedule(System.String,System.String)">
            <summary>
            Get a specific schedule for a campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="scheduleId">Schedule id to delete.</param>
            <returns>Returns true if shcedule was successfully deleted.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignScheduleService.SendTest(System.String,CTCT.Components.EmailCampaigns.TestSend)">
            <summary>
            Send a test send of a campaign.
            </summary>
            <param name="campaignId">Id of campaign to send test of.</param>
            <param name="testSend">Test send details.</param>
            <returns>Returns the sent test object.</returns>
        </member>
        <member name="T:CTCT.Services.CampaignTrackingService">
            <summary>
            Performs all actions pertaining to Constant Contact Campaign Tracking.
            </summary>
        </member>
        <member name="T:CTCT.Services.ICampaignTrackingService">
            <summary>
            Interface for CampaignTrackingService class.
            </summary>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetBounces(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get a result set of bounces for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">Filter for bounces created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link BounceActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetBounces(CTCT.Components.Pagination)">
            <summary>
            Get a result set of bounces for a given campaign.
            </summary>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link BounceActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetClicks(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get clicks for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="linkId">Specifies the link in the email campaign to retrieve click data for.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ClickActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetClicks(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get clicks for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ClickActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetClicks(CTCT.Components.Pagination)">
            <summary>
            Get clicks for a given campaign.
            </summary>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ClickActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetForwards(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get forwards for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetForwards(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get forwards for a given campaign.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetOpens(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get opens for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetOpens(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opens for a given campaign.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetSends(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get sends for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link SendActivity</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetSends(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get sends for a given campaign.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link SendActivity</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetOptOuts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get opt outs for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetOptOuts(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opt outs for a given campaign.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ICampaignTrackingService.GetSummary(System.String)">
            <summary>
            Get a summary of reporting data for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <returns>Tracking summary.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            Campaign tracking service constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetBounces(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get a result set of bounces for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">Filter for bounces created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link BounceActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetBounces(CTCT.Components.Pagination)">
            <summary>
            Get a result set of bounces for a given campaign.
            </summary>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link BounceActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetBounces(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get a result set of bounces for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">Filter for bounces created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link BounceActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetClicks(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get clicks for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ClickActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetClicks(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get clicks for a specific link in a campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="linkId">Specifies the link in the email campaign to retrieve click data for.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ClickActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetClicks(CTCT.Components.Pagination)">
            <summary>
            Get clicks for the provided Pagination page.
            </summary>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ClickActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetClicks(System.String)">
            <summary>
            Get ClickActivity at the given url.
            </summary>
            <param name="url">The url from which to retrieve an array of @link ClickActivity.</param>
            <returns>ResultSet containing a results array of @link ClickActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetForwards(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get forwards for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetForwards(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get forwards for a given campaign.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetForwards(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get forwards for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetOpens(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get opens for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetOpens(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opens for a given campaign.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetOpens(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opens for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetSends(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get sends for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link SendActivity</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetSends(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get sends for a given campaign.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link SendActivity</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetSends(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get sends for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link SendActivity</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetOptOuts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get opt outs for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetOptOuts(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opt outs for a given campaign.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetOptOuts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opt outs for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
        </member>
        <member name="M:CTCT.Services.CampaignTrackingService.GetSummary(System.String)">
            <summary>
            Get a summary of reporting data for a given campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <returns>Tracking summary.</returns>
        </member>
        <member name="T:CTCT.Services.ContactTrackingService">
            <summary>
            Performs all actions pertaining to Contact Tracking.
            </summary>
        </member>
        <member name="T:CTCT.Services.IContactTrackingService">
            <summary>
            Interface for ContactTrackingService class.
            </summary>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetActivities(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get all activities for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">Filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ContactActivity</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetActivities(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get all activities for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">Filter for activities created since the supplied date in the collection</param>	 
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ContactActivity</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetEmailCampaignActivities(System.String)">
            <summary>
            Get activities by email campaign for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <returns>ResultSet containing a results array of @link TrackingSummary</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetBounces(System.String,System.Nullable{System.Int32})">
            <summary>
            Get bounces for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <returns>ResultSet containing a results array of @link BounceActivity</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetBounces(CTCT.Components.Pagination)">
            <summary>
            Get bounces for a given contact.
            </summary>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link BounceActivity</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetClicks(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get clicks for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ClickActivity</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetClicks(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get clicks for a given contact.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ClickActivity</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetForwards(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get forwards for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetForwards(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get forwards for a given contact.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetOpens(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get opens for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetOpens(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opens for a given contact.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetSends(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get sends for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link SendActivity.</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetSends(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get sends for a given contact.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link SendActivity.</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetOptOuts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get opt outs for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetOptOuts(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opt outs for a given contact.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetSummary(System.String)">
            <summary>
            Get a summary of reporting data for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <returns>Tracking summary.</returns>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetContactTrackingClicks(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get clicks for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ClickActivity</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetContactTrackingBounces(System.String)">
            <summary>
            Get bounces for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <returns>ResultSet containing a results array of @link BounceActivity</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetContactTrackingForwards(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get forwards for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetContactTrackingOpens(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get opens for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetContactTrackingSends(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get sends for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link SendActivity.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetContactTrackingOptOuts(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get opt outs for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.IContactTrackingService.GetContactTrackingActivities(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get all activities for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">Filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ContactActivity.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            Contact tracking service constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetActivities(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get all activities for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">Filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ContactActivity</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetActivities(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get all activities for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">Filter for activities created since the supplied date in the collection</param>	 
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ContactActivity</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetEmailCampaignActivities(System.String)">
            <summary>
            Get activities by email campaign for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <returns>ResultSet containing a results array of @link TrackingSummary</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetBounces(System.String,System.Nullable{System.Int32})">
            <summary>
            Get bounces for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <returns>ResultSet containing a results array of @link BounceActivity</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetBounces(CTCT.Components.Pagination)">
            <summary>
            Get bounces for a given contact.
            </summary>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link BounceActivity</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetBounces(System.String,System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Get bounces for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link BounceActivity</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetClicks(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get clicks for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ClickActivity</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetClicks(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get clicks for a given contact.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ClickActivity</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetClicks(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get clicks for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ClickActivity</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetForwards(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get forwards for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetForwards(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get forwards for a given contact.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetForwards(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get forwards for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetOpens(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get opens for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetOpens(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opens for a given contact.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetOpens(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opens for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetSends(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get sends for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link SendActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetSends(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get sends for a given contact.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link SendActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetSends(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get sends for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link SendActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetOptOuts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get opt outs for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetOptOuts(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opt outs for a given contact.
            </summary>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetOptOuts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get opt outs for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <param name="pag">Pagination object.</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetSummary(System.String)">
            <summary>
            Get a summary of reporting data for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <returns>Tracking summary.</returns>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetContactTrackingClicks(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get clicks for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ClickActivity</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetContactTrackingBounces(System.String)">
            <summary>
            Get bounces for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <returns>ResultSet containing a results array of @link BounceActivity</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetContactTrackingForwards(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get forwards for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ForwardActivity.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetContactTrackingOpens(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get opens for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OpenActivity.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetContactTrackingSends(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get sends for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link SendActivity.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetContactTrackingOptOuts(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get opt outs for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="createdSince">filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link OptOutActivity.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.ContactTrackingService.GetContactTrackingActivities(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get all activities for a given contact.
            </summary>
            <param name="contactId">Contact id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="createdSince">Filter for activities created since the supplied date in the collection</param>
            <returns>ResultSet containing a results array of @link ContactActivity.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="T:CTCT.Services.EmailCampaignService">
            <summary>
            Performs all actions pertaining to the Contacts Collection.
            </summary>
        </member>
        <member name="T:CTCT.Services.IEmailCampaignService">
            <summary>
            Interface for CampaignService class.
            </summary>
        </member>
        <member name="M:CTCT.Services.IEmailCampaignService.GetCampaigns(System.Nullable{CTCT.Components.EmailCampaigns.CampaignStatus},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get a set of campaigns.
            </summary>
            <param name="status">Returns list of email campaigns with specified status.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="modifiedSince">limit campaigns to campaigns modified since the supplied date</param>
            <returns>Returns a list of campaigns.</returns>
        </member>
        <member name="M:CTCT.Services.IEmailCampaignService.GetCampaigns(System.Nullable{CTCT.Components.EmailCampaigns.CampaignStatus},System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get a set of campaigns.
            </summary>
            <param name="status">Returns list of email campaigns with specified status.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="modifiedSince">limit campaigns to campaigns modified since the supplied date</param>
            <param name="pag">Pagination object returned by a previous call to GetCampaigns</param>
            <returns>Returns a list of campaigns.</returns>
        </member>
        <member name="M:CTCT.Services.IEmailCampaignService.GetCampaigns(System.Nullable{System.DateTime})">
            <summary>
            Get a set of campaigns.
            </summary>
            <param name="modifiedSince">limit campaigns to campaigns modified since the supplied date</param>
            <returns>Returns a list of campaigns.</returns>
        </member>
        <member name="M:CTCT.Services.IEmailCampaignService.GetCampaign(System.String)">
            <summary>
            Get campaign details for a specific campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <returns>Returns a campaign.</returns>
        </member>
        <member name="M:CTCT.Services.IEmailCampaignService.AddCampaign(CTCT.Components.EmailCampaigns.EmailCampaign)">
            <summary>
            Create a new campaign.
            </summary>
            <param name="campaign">Campign to be created</param>
            <returns>Returns a campaign.</returns>
        </member>
        <member name="M:CTCT.Services.IEmailCampaignService.DeleteCampaign(System.String)">
            <summary>
            Delete an email campaign.
            </summary>
            <param name="campaignId">Valid campaign id.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:CTCT.Services.IEmailCampaignService.UpdateCampaign(CTCT.Components.EmailCampaigns.EmailCampaign)">
            <summary>
            Update a specific email campaign.
            </summary>
            <param name="campaign">Campaign to be updated.</param>
            <returns>Returns a campaign.</returns>
        </member>
        <member name="M:CTCT.Services.IEmailCampaignService.GetCampaignPreview(System.String)">
            <summary>
            Retrieve the text and HTML content to preview an existing email campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <returns>Returns a EmailCampaignPreview</returns>
        </member>
        <member name="M:CTCT.Services.EmailCampaignService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            Email campaign service constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.Services.EmailCampaignService.GetCampaigns(System.Nullable{System.DateTime})">
            <summary>
            Get a set of campaigns.
            </summary>
            <param name="modifiedSince">limit campaigns to campaigns modified since the supplied date</param>
            <returns>Returns a list of campaigns.</returns>
        </member>
        <member name="M:CTCT.Services.EmailCampaignService.GetCampaigns(System.Nullable{CTCT.Components.EmailCampaigns.CampaignStatus},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get a set of campaigns.
            </summary>
            <param name="status">Returns list of email campaigns with specified status.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="modifiedSince">limit campaigns to campaigns modified since the supplied date</param>
            <returns>Returns a ResultSet of campaigns.</returns>
        </member>
        <member name="M:CTCT.Services.EmailCampaignService.GetCampaigns(System.Nullable{CTCT.Components.EmailCampaigns.CampaignStatus},System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get a set of campaigns.
            </summary>
            <param name="status">Returns list of email campaigns with specified status.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="modifiedSince">limit campaigns to campaigns modified since the supplied date</param>
            <param name="pag">Pagination object returned by a previous call to GetCampaigns</param>
            <returns>Returns a ResultSet of campaigns.</returns>
        </member>
        <member name="M:CTCT.Services.EmailCampaignService.GetCampaign(System.String)">
            <summary>
            Get campaign details for a specific campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <returns>Returns a campaign.</returns>
        </member>
        <member name="M:CTCT.Services.EmailCampaignService.AddCampaign(CTCT.Components.EmailCampaigns.EmailCampaign)">
            <summary>
            Create a new campaign.
            </summary>
            <param name="campaign">Campign to be created</param>
            <returns>Returns a campaign.</returns>
        </member>
        <member name="M:CTCT.Services.EmailCampaignService.DeleteCampaign(System.String)">
            <summary>
            Delete an email campaign.
            </summary>
            <param name="campaignId">Valid campaign id.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:CTCT.Services.EmailCampaignService.UpdateCampaign(CTCT.Components.EmailCampaigns.EmailCampaign)">
            <summary>
            Update a specific email campaign.
            </summary>
            <param name="campaign">Campaign to be updated.</param>
            <returns>Returns a campaign.</returns>
        </member>
        <member name="M:CTCT.Services.EmailCampaignService.GetCampaignPreview(System.String)">
            <summary>
            Retrieve the text and HTML content to preview an existing email campaign.
            </summary>
            <param name="campaignId">Campaign id.</param>
            <returns>Returns a EmailCampaignPreview</returns>
        </member>
        <member name="T:CTCT.Services.ContactService">
            <summary>
            Performs all actions pertaining to the Contacts Collection.
            </summary>
        </member>
        <member name="T:CTCT.Services.IContactService">
            <summary>
            Interface for ContactService class.
            </summary>
        </member>
        <member name="M:CTCT.Services.IContactService.GetContacts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{CTCT.Components.Contacts.ContactStatus})">
            <summary>
            Get an array of contacts.
            </summary>
            <param name="email">Match the exact email address.</param>
            <param name="limit">Limit the number of returned values.</param>
            <param name="modifiedSince">limit contact to contacts modified since the supplied date</param>
            <param name="status">Returns list of contacts with specified status.</param>
            <returns>Returns a list of contacts.</returns>
        </member>
        <member name="M:CTCT.Services.IContactService.GetContacts(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get an array of contacts.
            </summary>
            <param name="modifiedSince">limit contact to contacts modified since the supplied date</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a list of contacts.</returns>
        </member>
        <member name="M:CTCT.Services.IContactService.GetContact(System.String)">
            <summary>
            Get contact details for a specific contact.
            </summary>
            <param name="contactId">Unique contact id.</param>
            <returns>Returns a contact.</returns>
        </member>
        <member name="M:CTCT.Services.IContactService.GetContacts(System.Nullable{System.DateTime})">
            <summary>
            Get an array of contacts.
            </summary>
            <param name="modifiedSince">limit contact to contacts modified since the supplied date</param>
            <returns>Returns a list of contacts.</returns>
        </member>
        <member name="M:CTCT.Services.IContactService.AddContact(CTCT.Components.Contacts.Contact,System.Boolean)">
            <summary>
            Add a new contact to the Constant Contact account
            </summary>
            <param name="contact">Contact to add.</param>
            <param name="actionByVisitor">Set to true if action by visitor.</param>
            <returns>Returns the newly created contact.</returns>
        </member>
        <member name="M:CTCT.Services.IContactService.DeleteContact(System.String)">
            <summary>
            Delete contact details for a specific contact.
            </summary>
            <param name="contactId">Unique contact id.</param>
            <returns>Returns true if operation succeeded.</returns>
        </member>
        <member name="M:CTCT.Services.IContactService.DeleteContact(CTCT.Components.Contacts.Contact)">
            <summary>
            Unsubscribe a specific contact.
            </summary>
            <param name="contact">The Contact</param>
            <returns>Returns true if operation succeeded.</returns>
        </member>
        <member name="M:CTCT.Services.IContactService.DeleteContactFromLists(System.String)">
            <summary>
            Delete a contact from all contact lists.
            </summary>
            <param name="contactId">Contact id to be removed from lists.</param>
            <returns>Returns true if operation succeeded.</returns>
        </member>
        <member name="M:CTCT.Services.IContactService.DeleteContactFromList(System.String,System.String)">
            <summary>
            Delete a contact from a specific contact list.
            </summary>
            <param name="contactId">Contact id to be removed</param>
            <param name="listId">ContactList to remove the contact from</param>
            <returns>Returns true if operation succeeded.</returns>
        </member>
        <member name="M:CTCT.Services.IContactService.UpdateContact(CTCT.Components.Contacts.Contact,System.Boolean)">
            <summary>
            Update contact details for a specific contact.
            </summary>
            <param name="contact">Contact to be updated.</param>
            <param name="actionByVisitor">Set to true if action by visitor.</param>
            <returns>Returns the updated contact.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            Contact service constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.Services.ContactService.GetContacts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{CTCT.Components.Contacts.ContactStatus})">
            <summary>
            Get an array of contacts.
            </summary>
            <param name="email">Match the exact email address.</param>
            <param name="limit">Limit the number of returned values.</param>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <param name="status">Filter results by contact status</param>
            <returns>Returns a list of contacts.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.GetContacts(System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get an array of contacts.
            </summary>
            <param name="modifiedSince">limit contact to contacts modified since the supplied date</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a list of contacts.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.GetContacts(System.Nullable{System.DateTime})">
            <summary>
            Get an array of contacts.
            </summary>
            <param name="modifiedSince">limit contact to contacts modified since the supplied date</param>
            <returns>Returns a list of contacts.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.GetContacts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{CTCT.Components.Contacts.ContactStatus},CTCT.Components.Pagination)">
            <summary>
            Get an array of contacts.
            </summary>
            <param name="email">Match the exact email address.</param>
            <param name="limit">Limit the number of returned values.</param>
            <param name="modifiedSince">limit contact to contacts modified since the supplied date</param>
            <param name="status">Match the exact contact status.</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a list of contacts.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.GetContact(System.String)">
            <summary>
            Get contact details for a specific contact.
            </summary>
            <param name="contactId">Unique contact id.</param>
            <returns>Returns a contact.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.AddContact(CTCT.Components.Contacts.Contact,System.Boolean)">
            <summary>
            Add a new contact to the Constant Contact account
            </summary>
            <param name="contact">Contact to add.</param>
            <param name="actionByVisitor">Set to true if action by visitor.</param>
            <returns>Returns the newly created contact.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.DeleteContact(System.String)">
            <summary>
            Unsubscribe a specific contact.
            </summary>
            <param name="contactId">Unique contact id.</param>
            <returns>Returns true if operation succeeded.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.DeleteContact(CTCT.Components.Contacts.Contact)">
            <summary>
            Unsubscribe a specific contact.
            </summary>
            <param name="contact">The Contact</param>
            <returns>Returns true if operation succeeded.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.DeleteContactFromLists(System.String)">
            <summary>
            Delete a contact from all contact lists.
            </summary>
            <param name="contactId">Contact id to be removed from lists.</param>
            <returns>Returns true if operation succeeded.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.DeleteContactFromLists(CTCT.Components.Contacts.Contact)">
            <summary>
            Delete a contact from all contact lists.
            </summary>
            <param name="contact">The Contact</param>
            <returns>Returns true if operation succeeded.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.DeleteContactFromList(System.String,System.String)">
            <summary>
            Delete a contact from a specific contact list.
            </summary>
            <param name="contactId">Contact id to be removed</param>
            <param name="listId">ContactList to remove the contact from</param>
            <returns>Returns true if operation succeeded.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.DeleteContactFromList(CTCT.Components.Contacts.Contact,CTCT.Components.Contacts.ContactList)">
            <summary>
            Delete a contact from a specific contact list.
            </summary>
            <param name="contact">The Contact to be removed</param>
            <param name="list">The ContactList to remove the contact from</param>
            <returns>Returns true if operation succeeded.</returns>
        </member>
        <member name="M:CTCT.Services.ContactService.UpdateContact(CTCT.Components.Contacts.Contact,System.Boolean)">
            <summary>
            Update contact details for a specific contact.
            </summary>
            <param name="contact">Contact to be updated.</param>
            <param name="actionByVisitor">Set to true if action by visitor.</param>
            <returns>Returns the updated contact.</returns>
        </member>
        <member name="T:CTCT.Services.EventSpotService">
            <summary>
            Performs all actions for EventSpot
            </summary>
        </member>
        <member name="M:CTCT.Services.EventSpotService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            EventSspot service constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetAllEventSpots(System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            View all existing events
            </summary>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 50</param>
            <param name="pag">Pagination object</param>
            <returns>ResultSet containing a results array of IndividualEvents</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetEventSpot(System.String)">
            <summary>
            Retrieve an event specified by the event_id
            </summary>
            <param name="eventId">Event id</param>
            <returns>The event</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PostEventSpot(CTCT.Components.EventSpot.IndividualEvent)">
            <summary>
            Publish an event
            </summary>
            <param name="eventSpot">The event to publish</param>
            <returns>The published event</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PutEventSpot(System.String,CTCT.Components.EventSpot.IndividualEvent)">
            <summary>
            Update an event
            </summary>
            <param name="eventId">Event id to be updated</param>
            <param name="eventSpot">The new values for event</param>
            <returns>The updated event</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PatchEventSpotStatus(System.String,CTCT.Components.EventSpot.EventStatus)">
            <summary>
            Publish or cancel an event by changing the status of the event
            </summary>
            <param name="eventId">Event id</param>
            <param name="eventStatus">New status of the event. ACTIVE" and "CANCELLED are allowed</param>
            <returns>The updated event</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetAllEventFees(System.String)">
            <summary>
            Retrieve all existing fees for an event
            </summary>
            <param name="eventId">Event id</param>
            <returns>A list of event fees for the specified event</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetEventFee(System.String,System.String)">
            <summary>
            Retrieve an individual event fee
            </summary>
            <param name="eventId">Event id</param>
            <param name="feeId">EventFee id</param>
            <returns>An EventFee object</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PutEventFee(System.String,System.String,CTCT.Components.EventSpot.EventFee)">
            <summary>
            Update an individual event fee
            </summary>
            <param name="eventId">Event id</param>
            <param name="feeId">EventFee id</param>
            <param name="eventFee">The new values of EventFee</param>
            <returns>The updated EventFee</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.DeleteEventFee(System.String,System.String)">
            <summary>
             Delete an individual event fee
            </summary>
            <param name="eventId">Event id</param>
            <param name="feeId">EventFee id</param>
            <returns>True if successfuly deleted</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PostEventFee(System.String,CTCT.Components.EventSpot.EventFee)">
            <summary>
            Create an individual event fee
            </summary>
            <param name="eventId">Event id</param>
            <param name="eventFee">EventFee object</param>
            <returns>The newly created EventFee</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetAllPromocodes(System.String)">
            <summary>
            Retrieve all existing promo codes for an event
            </summary>
            <param name="eventId">Event id</param>
            <returns>A list of Promocode</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetPromocode(System.String,System.String)">
            <summary>
            Retrieve an existing promo codes for an event
            </summary>
            <param name="eventId">Event id</param>
            <param name="promocodeId">Promocode id</param>
            <returns>The Promocode object</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PostPromocode(System.String,CTCT.Components.EventSpot.Promocode)">
            <summary>
            Create a new promo code for an event
            </summary>
            <param name="eventId">Event id</param>
            <param name="promocode">Promocode object to be created</param>
            <returns>The newly created Promocode</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PutPromocode(System.String,System.String,CTCT.Components.EventSpot.Promocode)">
            <summary>
            Update a promo code for an event
            </summary>
            <param name="eventId">Event id</param>
            <param name="promocodeId">Promocode id</param>
            <param name="promocode">The new Promocode values</param>
            <returns>The newly updated Promocode</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.DeletePromocode(System.String,System.String)">
            <summary>
            Delete a promo code for an event
            </summary>
            <param name="eventId">Event id</param>
            <param name="promocodeId">Promocode id</param>
            <returns>True if successfuly deleted</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetRegistrant(System.String,System.String)">
            <summary>
            Retrieve detailed information for a specific event registrant
            </summary>
            <param name="eventId">Event id</param>
            <param name="registrantId">Redistrant id</param>
            <returns>Registrant details</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetAllRegistrants(System.String,System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Retrieve a list of registrants for the specified event
            </summary>
            <param name="eventId">Event id</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 50</param>
            <param name="pag">Pagination object</param>
            <returns>ResultSet containing a results array of Registrant</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetAllEventItems(System.String)">
            <summary>
            Retrieve all existing items associated with an event
            </summary>
            <param name="eventId">Event id</param>
            <returns>A list of EventItem</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetEventItem(System.String,System.String)">
            <summary>
             Retrieve specific event item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">Eventitem id</param>
            <returns>EventItem object</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PutEventItem(System.String,System.String,CTCT.Components.EventSpot.EventItem)">
            <summary>
             Update a specific event item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <param name="eventItem">The newly values for EventItem</param>
            <returns>The updated EventItem</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PostEventItem(System.String,CTCT.Components.EventSpot.EventItem)">
            <summary>
             Create a specific event item
            </summary>
            <param name="eventId">Event id</param>
            <param name="eventItem">EventItem id</param>
            <returns>The newly created EventItem</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.DeleteEventItem(System.String,System.String)">
            <summary>
            Delete a specific event item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <returns>True if successfuly deleted</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PostEventItemAttribute(System.String,System.String,CTCT.Components.EventSpot.Attribute)">
            <summary>
            Create an attributes for an item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <param name="attribute">The Attribute object</param>
            <returns>The newly created attribure</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.PutEventItemAttribute(System.String,System.String,System.String,CTCT.Components.EventSpot.Attribute)">
            <summary>
            Updates an existing attributes for an item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <param name="attributeId">Attribute id</param>
            <param name="attribute">Attribute new values</param>
            <returns>The newly updated attribute</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetEventItemAttribute(System.String,System.String,System.String)">
            <summary>
            Retrieve an existing attributes for an item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <param name="attributeId">Attribute id</param>
            <returns>Attribute object</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.GetAllEventItemAttributes(System.String,System.String)">
            <summary>
            Retrieve all existing attributes for an item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <returns>A list of Attributes</returns>
        </member>
        <member name="M:CTCT.Services.EventSpotService.DeleteEventItemAttribute(System.String,System.String,System.String)">
            <summary>
            Delete an existing attributes for an item
            </summary>
            <param name="eventId">Event id</param>
            <param name="itemId">EventItem id</param>
            <param name="attributeId">Attribute id</param>
            <returns>True if successfuly deleted</returns>
        </member>
        <member name="T:CTCT.Services.IListService">
            <summary>
            Interface for ListService class.
            </summary>
        </member>
        <member name="M:CTCT.Services.IListService.GetLists(System.Nullable{System.DateTime})">
            <summary>
            Get lists within an account.
            </summary>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <returns>Returns a list of contact lists.</returns>
        </member>
        <member name="M:CTCT.Services.IListService.AddList(CTCT.Components.Contacts.ContactList)">
            <summary>
            Add a new list.
            </summary>
            <param name="list">Contact list.</param>
            <returns>Returns the newly created list.</returns>
        </member>
        <member name="M:CTCT.Services.IListService.GetList(System.String)">
            <summary>
            Get an individual contact list.
            </summary>
            <param name="listId">List id.</param>
            <returns>Returns a contact list.</returns>
        </member>
        <member name="M:CTCT.Services.IListService.UpdateList(CTCT.Components.Contacts.ContactList)">
            <summary>
            Update a Contact List.
            </summary>
            <param name="list">ContactList to be updated</param>
            <returns>Contact list</returns>
        </member>
        <member name="M:CTCT.Services.IListService.DeleteList(System.String)">
            <summary>
            Delete a Contact List.
            </summary>
            <param name="listId">List id.</param>
            <returns>return true if list was deleted successfully, false otherwise</returns>
        </member>
        <member name="M:CTCT.Services.IListService.GetContactsFromList(CTCT.Components.Contacts.ContactList,System.Nullable{System.DateTime})">
            <summary>
            Get contact that belong to a specific list.
            </summary>
            <param name="list">Contact list object.</param>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <returns>Returns the list of contacts.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.IListService.GetContactsFromList(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get all contacts from an individual list.
            </summary>
            <param name="listId">List id to retrieve contacts for.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a list of contacts.</returns>
        </member>
        <member name="M:CTCT.Services.IListService.GetContactsFromList(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get contact that belong to a specific list.
            </summary>
            <param name="listId">Contact list id.</param>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <returns>Returns a list of contacts.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.IListService.GetContactsFromList(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get contact that belong to a specific list.
            </summary>
            <param name="listId">Contact list id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <returns>Returns a list of contacts.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="T:CTCT.Services.IMyLibraryService">
            <summary>
            Interface for MyLibraryService class
            </summary>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryInfo">
            <summary>
            Get MyLibrary usage information
            </summary>
            <returns>Returns a MyLibraryInfo object</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryFolders(System.Nullable{CTCT.Services.FoldersSortBy},System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Get all existing MyLibrary folders
            </summary>
            <param name="sortBy">Specifies how the list of folders is sorted</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 50, default = 50.</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a collection of MyLibraryFolder objects.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.AddLibraryFolder(CTCT.Components.MyLibrary.MyLibraryFolder)">
            <summary>
            Add new folder to MyLibrary
            </summary>
            <param name="folder">Folder to be added (with name and parent id)</param>
            <returns>Returns a MyLibraryFolder object.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryFolder(System.String)">
            <summary>
            Get a specific folder by Id
            </summary>
            <param name="folderId">The id of the folder</param>
            <returns>Returns a MyLibraryFolder object.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.UpdateLibraryFolder(CTCT.Components.MyLibrary.MyLibraryFolder,System.Nullable{System.Boolean})">
            <summary>
            Update name and parent_id for a specific folder
            </summary>
            <param name="folder">Folder to be updated (with name and parent id)</param>
            <param name="includePayload">Determines if update's folder JSON payload is returned</param>
            <returns>Returns a MyLibraryFolder object.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.DeleteLibraryFolder(System.String)">
            <summary>
            Delete a specific folder
            </summary>
            <param name="folderId">The id of the folder</param>
            <returns>Returns true if folder was deleted successfully, false otherwise</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryTrashFiles(System.Nullable{CTCT.Services.FileTypes},System.Nullable{CTCT.Services.TrashSortBy},System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Get files from Trash folder
            </summary>
            <param name="type">The type of the files to retrieve</param>
            <param name="sortBy">Specifies how the list of folders is sorted</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 50, default = 50.</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.DeleteLibraryTrashFiles">
            <summary>
            Delete files in Trash folder
            </summary>
            <returns>Returns true if files were deleted successfully, false otherwise</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryFiles(System.Nullable{CTCT.Services.FileTypes},System.Nullable{CTCT.Services.FilesSources},System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Get files
            </summary>
            <param name="type">The type of the files to retrieve</param>
            <param name="source">Specifies to retrieve files from a particular source</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 50, default = 50.</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryFilesByFolder(System.String,System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Get files from a specific folder
            </summary>
            <param name="folderId">The id of the folder from which to retrieve files</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 50, default = 50.</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryFile(System.String)">
            <summary>
            Get file after id
            </summary>
            <param name="fileId">The id of the file</param>
            <returns>Returns a MyLibraryFile object.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.UpdateLibraryFile(CTCT.Components.MyLibrary.MyLibraryFile,System.Nullable{System.Boolean})">
            <summary>
            Update a specific file
            </summary>
            <param name="file">File to be updated</param>
            <param name="includePayload">Determines if update's folder JSON payload is returned</param>
            <returns>Returns a MyLibraryFile object.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.DeleteLibraryFile(System.String)">
            <summary>
            Delete a specific file
            </summary>
            <param name="fileId">The id of the file</param>
            <returns>Returns true if folder was deleted successfully, false otherwise</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryFileUploadStatus(System.String)">
            <summary>
            Get status for an upload file
            </summary>
            <param name="fileId">The id of the file</param>
            <returns>Returns a list of FileUploadStatus objects</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.MoveLibraryFile(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Move files to a different folder
            </summary>
            <param name="folderId">The id of the folder</param>
            <param name="fileIds">List of comma separated file ids</param>
            <returns>Returns a list of FileMoveResult objects.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.AddLibraryFilesMultipart(System.String,CTCT.Components.MyLibrary.FileType,System.String,System.String,CTCT.Components.MyLibrary.FileSource,System.Byte[])">
            <summary>
            Add files using the multipart content-type
            </summary>
            <param name="fileName">The file name and extension</param>
            <param name="fileType">The file type</param>
            <param name="folderId">The id of the folder</param>
            <param name="description">The description of the file</param>
            <param name="source">The source of the original file</param>
            <param name="data">The data contained in the file being uploaded</param>
            <returns>Returns the file Id associated with the uploaded file</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryFolders">
            <summary>
            Get all existing MyLibrary folders
            </summary>
            <returns>Returns a collection of MyLibraryFolder objects.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.UpdateLibraryFolder(CTCT.Components.MyLibrary.MyLibraryFolder)">
            <summary>
            Update name and parent_id for a specific folder
            </summary>
            <param name="folder">Folder to be added (with name and parent id)</param>
            <returns>Returns a MyLibraryFolder object.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryTrashFiles">
            <summary>
            Get files from Trash folder
            </summary>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryFiles">
            <summary>
            Get files
            </summary>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="M:CTCT.Services.IMyLibraryService.GetLibraryFilesByFolder(System.String)">
            <summary>
            Get files from a specific folder
            </summary>
            <param name="folderId">The id of the folder from which to retrieve files</param>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="T:CTCT.Services.ListService">
            <summary>
            Performs all actions pertaining to the Lists Collection
            </summary>
        </member>
        <member name="M:CTCT.Services.ListService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            List service constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.Services.ListService.GetLists(System.Nullable{System.DateTime})">
            <summary>
            Get lists within an account.
            </summary>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <returns>Returns a list of contact lists.</returns>
        </member>
        <member name="M:CTCT.Services.ListService.AddList(CTCT.Components.Contacts.ContactList)">
            <summary>
            Add a new list.
            </summary>
            <param name="list">Contact list.</param>
            <returns>Returns the newly created list.</returns>
        </member>
        <member name="M:CTCT.Services.ListService.GetList(System.String)">
            <summary>
            Get an individual contact list.
            </summary>
            <param name="listId">List id.</param>
            <returns>Returns a contact list.</returns>
        </member>
        <member name="M:CTCT.Services.ListService.UpdateList(CTCT.Components.Contacts.ContactList)">
            <summary>
            Update a Contact List.
            </summary>
            <param name="list">ContactList to be updated</param>
            <returns>Contact list</returns>
        </member>
        <member name="M:CTCT.Services.ListService.DeleteList(System.String)">
            <summary>
            Delete a Contact List.
            </summary>
            <param name="listId">List id.</param>
            <returns>return true if list was deleted successfully, false otherwise</returns>
        </member>
        <member name="M:CTCT.Services.ListService.GetContactsFromList(CTCT.Components.Contacts.ContactList,System.Nullable{System.DateTime})">
            <summary>
            Get contact that belong to a specific list.
            </summary>
            <param name="list">Contact list object.</param>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <returns>Returns the list of contacts.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.ListService.GetContactsFromList(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},CTCT.Components.Pagination)">
            <summary>
            Get all contacts from an individual list.
            </summary>
            <param name="listId">List id to retrieve contacts for.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a list of contacts.</returns>
        </member>
        <member name="M:CTCT.Services.ListService.GetContactsFromList(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get contact that belong to a specific list.
            </summary>
            <param name="listId">Contact list id.</param>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <returns>Returns a list of contacts.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="M:CTCT.Services.ListService.GetContactsFromList(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Get contact that belong to a specific list.
            </summary>
            <param name="listId">Contact list id.</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 500, default = 500.</param>
            <param name="modifiedSince">limit contacts retrieved to contacts modified since the supplied date</param>
            <returns>Returns a list of contacts.</returns>
            <exception cref="T:CTCT.Exceptions.IllegalArgumentException">IllegalArgumentException</exception>
        </member>
        <member name="T:CTCT.Services.MyLibraryService">
            <summary>
            Performs all actions pertaining to the MyLibrary Collection
            </summary>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.#ctor(CTCT.Services.IUserServiceContext)">
            <summary>
            My library service constructor
            </summary>
            <param name="userServiceContext">User service context</param>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryInfo">
            <summary>
            Get MyLibrary usage information
            </summary>
            <returns>Returns a MyLibraryInfo object</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryFolders(System.Nullable{CTCT.Services.FoldersSortBy},System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Get all existing MyLibrary folders
            </summary>
            <param name="sortBy">Specifies how the list of folders is sorted</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 50, default = 50.</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a collection of MyLibraryFolder objects.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.AddLibraryFolder(CTCT.Components.MyLibrary.MyLibraryFolder)">
            <summary>
            Add new folder to MyLibrary
            </summary>
            <param name="folder">Folder to be added (with name and parent id)</param>
            <returns>Returns a MyLibraryFolder object.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryFolder(System.String)">
            <summary>
            Get a folder by Id
            </summary>
            <param name="folderId">The id of the folder</param>
            <returns>Returns a MyLibraryFolder object.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.UpdateLibraryFolder(CTCT.Components.MyLibrary.MyLibraryFolder,System.Nullable{System.Boolean})">
            <summary>
            Update name and parent_id for a specific folder
            </summary>
            <param name="folder">Folder to be added (with name and parent id)</param>
            <param name="includePayload">Determines if update's folder JSON payload is returned</param>
            <returns>Returns a MyLibraryFolder object.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.DeleteLibraryFolder(System.String)">
            <summary>
            Delete a specific folder
            </summary>
            <param name="folderId">The id of the folder</param>
            <returns>Returns true if folder was deleted successfully, false otherwise</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.DeleteLibraryFolder(CTCT.Components.MyLibrary.MyLibraryFolder)">
            <summary>
            Delete a specific folder
            </summary>
            <param name="folder">The MyLibraryFolder</param>
            <returns>Returns true if folder was deleted successfully, false otherwise</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryTrashFiles(System.Nullable{CTCT.Services.FileTypes},System.Nullable{CTCT.Services.TrashSortBy},System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Get files from Trash folder
            </summary>
            <param name="type">The type of the files to retrieve</param>
            <param name="sortBy">Specifies how the list of folders is sorted</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 50, default = 50.</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.DeleteLibraryTrashFiles">
            <summary>
            Delete files in Trash folder
            </summary>
            <returns>Returns true if files were deleted successfully, false otherwise</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryFiles(System.Nullable{CTCT.Services.FileTypes},System.Nullable{CTCT.Services.FilesSources},System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Get files
            </summary>
            <param name="type">The type of the files to retrieve</param>
            <param name="source">Specifies to retrieve files from a particular source</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 50, default = 50.</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryFilesByFolder(System.String,System.Nullable{System.Int32},CTCT.Components.Pagination)">
            <summary>
            Get files from a specific folder
            </summary>
            <param name="folderId">The id of the folder from which to retrieve files</param>
            <param name="limit">Specifies the number of results per page in the output, from 1 - 50, default = 50.</param>
            <param name="pag">Pagination object.</param>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryFile(System.String)">
            <summary>
            Get file after id
            </summary>
            <param name="fileId">The id of the file</param>
            <returns>Returns a MyLibraryFile object.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.UpdateLibraryFile(CTCT.Components.MyLibrary.MyLibraryFile,System.Nullable{System.Boolean})">
            <summary>
            Update a specific file
            </summary>
            <param name="file">File to be updated</param>
            <param name="includePayload">Determines if update's folder JSON payload is returned</param>
            <returns>Returns a MyLibraryFile object.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.DeleteLibraryFile(System.String)">
            <summary>
            Delete a specific file
            </summary>
            <param name="fileId">The id of the file</param>
            <returns>Returns true if folder was deleted successfully, false otherwise</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.DeleteLibraryFile(CTCT.Components.MyLibrary.MyLibraryFile)">
            <summary>
            Delete a specific file
            </summary>
            <param name="file">The MyLibraryFile</param>
            <returns>Returns true if folder was deleted successfully, false otherwise</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryFileUploadStatus(System.String)">
            <summary>
            Get status for an upload file
            </summary>
            <param name="fileId">The id of the file</param>
            <returns>Returns a list of FileUploadStatus objects</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.MoveLibraryFile(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Move files to a different folder
            </summary>
            <param name="folderId">The id of the folder</param>
            <param name="fileIds">List of file ids</param>
            <returns>Returns a list of FileMoveResult objects.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.AddLibraryFilesMultipart(System.String,CTCT.Components.MyLibrary.FileType,System.String,System.String,CTCT.Components.MyLibrary.FileSource,System.Byte[])">
            <summary>
            Add files using the multipart content-type
            </summary>
            <param name="fileName">The file name and extension</param>
            <param name="fileType">The file type</param>
            <param name="folderId">The id of the folder</param>
            <param name="description">The description of the file</param>
            <param name="source">The source of the original file</param>
            <param name="data">The data contained in the file being uploaded</param>
            <returns>Returns the file Id associated with the uploaded file</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryFolders">
            <summary>
            Get all existing MyLibrary folders
            </summary>
            <returns>Returns a collection of MyLibraryFolder objects.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.UpdateLibraryFolder(CTCT.Components.MyLibrary.MyLibraryFolder)">
            <summary>
            Update name and parent_id for a specific folder
            </summary>
            <param name="folder">Folder to be added (with name and parent id)</param>
            <returns>Returns a MyLibraryFolder object.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryTrashFiles">
            <summary>
            Get files from Trash folder
            </summary>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryFiles">
            <summary>
            Get files
            </summary>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="M:CTCT.Services.MyLibraryService.GetLibraryFilesByFolder(System.String)">
            <summary>
            Get files from a specific folder
            </summary>
            <param name="folderId">The id of the folder from which to retrieve files</param>
            <returns>Returns a collection of MyLibraryFile objects.</returns>
        </member>
        <member name="T:CTCT.Services.FoldersSortBy">
            <summary>
            Folders sort by enum
            </summary>
        </member>
        <member name="F:CTCT.Services.FoldersSortBy.CREATED_DATE">
            <summary>
            Sort by date folder was created, ascending
            </summary>
        </member>
        <member name="F:CTCT.Services.FoldersSortBy.CREATED_DATE_DESC">
            <summary>
            Sort by date folder was last modified, descending
            </summary>
        </member>
        <member name="F:CTCT.Services.FoldersSortBy.MODIFIED_DATE">
            <summary>
            Sort by date folder was last modified, ascending
            </summary>
        </member>
        <member name="F:CTCT.Services.FoldersSortBy.MODIFIED_DATE_DESC">
            <summary>
            Sort by date folder was last modified, descending
            </summary>
        </member>
        <member name="F:CTCT.Services.FoldersSortBy.NAME">
            <summary>
            Sort by name (A to Z)
            </summary>
        </member>
        <member name="F:CTCT.Services.FoldersSortBy.NAME_DESC">
            <summary>
            Sort by name (Z to A)
            </summary>
        </member>
        <member name="T:CTCT.Services.FileTypes">
            <summary>
            File types enum
            </summary>
        </member>
        <member name="F:CTCT.Services.FileTypes.ALL">
            <summary>
            All files
            </summary>
        </member>
        <member name="F:CTCT.Services.FileTypes.IMAGES">
            <summary>
            Image files
            </summary>
        </member>
        <member name="F:CTCT.Services.FileTypes.DOCUMENTS">
            <summary>
            Document files
            </summary>
        </member>
        <member name="T:CTCT.Services.TrashSortBy">
            <summary>
            Trash folders sort by enum
            </summary>
        </member>
        <member name="F:CTCT.Services.TrashSortBy.CREATED_DATE">
            <summary>
            Sort by date folder was created, ascending
            </summary>
        </member>
        <member name="F:CTCT.Services.TrashSortBy.CREATED_DATE_DESC">
            <summary>
            Sort by date folder was last modified, descending
            </summary>
        </member>
        <member name="F:CTCT.Services.TrashSortBy.MODIFIED_DATE">
            <summary>
            Sort by date folder was last modified, ascending
            </summary>
        </member>
        <member name="F:CTCT.Services.TrashSortBy.MODIFIED_DATE_DESC">
            <summary>
            Sort by date folder was last modified, descending
            </summary>
        </member>
        <member name="F:CTCT.Services.TrashSortBy.NAME">
            <summary>
            Sort by name (A to Z)
            </summary>
        </member>
        <member name="F:CTCT.Services.TrashSortBy.NAME_DESC">
            <summary>
            Sort by name (Z to A)
            </summary>
        </member>
        <member name="F:CTCT.Services.TrashSortBy.SIZE">
            <summary>
            Sort by file size, smallest to largest
            </summary>
        </member>
        <member name="F:CTCT.Services.TrashSortBy.SIZE_DESC">
            <summary>
            Sort by file size, largest to smallest
            </summary>
        </member>
        <member name="F:CTCT.Services.TrashSortBy.DIMENSION">
            <summary>
            Sort by file domensions, smallest to largest
            </summary>
        </member>
        <member name="F:CTCT.Services.TrashSortBy.DIMENSION_DESC">
            <summary>
            Sort by file dimenstiona, largest to smallest
            </summary>
        </member>
        <member name="T:CTCT.Services.FilesSources">
            <summary>
            File source enum
            </summary>
        </member>
        <member name="F:CTCT.Services.FilesSources.ALL">
            <summary>
            Files from all sources
            </summary>
        </member>
        <member name="F:CTCT.Services.FilesSources.MyComputer">
            <summary>
            Computer source
            </summary>
        </member>
        <member name="F:CTCT.Services.FilesSources.StockImage">
            <summary>
            StockImage source
            </summary>
        </member>
        <member name="F:CTCT.Services.FilesSources.Facebook">
            <summary>
            Facebook source - MyLibrary Plus customers only
            </summary>
        </member>
        <member name="F:CTCT.Services.FilesSources.Instagram">
            <summary>
            Istagram source - MyLibrary Plus customers only
            </summary>
        </member>
        <member name="F:CTCT.Services.FilesSources.Shutterstock">
            <summary>
            Shutterstock source
            </summary>
        </member>
        <member name="F:CTCT.Services.FilesSources.Mobile">
            <summary>
            Mobile source
            </summary>
        </member>
        <member name="T:CTCT.Util.HttpMethod">
            <summary>
            The allowed HTTP methods for the HTTP and HTTPS Processors.
            </summary>
        </member>
        <member name="F:CTCT.Util.HttpMethod.GET">
            <summary>
            Get
            </summary>
        </member>
        <member name="F:CTCT.Util.HttpMethod.POST">
            <summary>
            Post
            </summary>
        </member>
        <member name="F:CTCT.Util.HttpMethod.DELETE">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:CTCT.Util.HttpMethod.PUT">
            <summary>
            Put
            </summary>
        </member>
        <member name="F:CTCT.Util.HttpMethod.PATCH">
            <summary>
            Patch
            </summary>
        </member>
        <member name="T:CTCT.Util.IContentType">
            <summary>
            Content type interface
            </summary>
        </member>
        <member name="P:CTCT.Util.IContentType.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:CTCT.Util.JsonContentType">
            <summary>
            Json content type
            </summary>
        </member>
        <member name="M:CTCT.Util.JsonContentType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CTCT.Util.JsonContentType.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:CTCT.Util.FormDataContentType">
            <summary>
            Form data content type
            </summary>
        </member>
        <member name="M:CTCT.Util.FormDataContentType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CTCT.Util.FormDataContentType.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:CTCT.Util.RawApiRequestError">
            <summary>
            Class for holding the URL request error.
            </summary>
        </member>
        <member name="M:CTCT.Util.RawApiRequestError.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:CTCT.Util.RawApiRequestError.Key">
            <summary>
            Gets or sets the error key.
            </summary>
        </member>
        <member name="P:CTCT.Util.RawApiRequestError.Message">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="T:CTCT.Util.RawApiResponse">
            <summary>
            URL response class.
            </summary>
        </member>
        <member name="M:CTCT.Util.RawApiResponse.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:CTCT.Util.RawApiResponse.GetErrorMessage">
            <summary>
            Returns the list of errors.
            </summary>
            <returns>Returns formatted error message.</returns>
        </member>
        <member name="M:CTCT.Util.RawApiResponse.Get``1">
            <summary>
            Returns the object represented by the JSON string.
            </summary>
            <typeparam name="T">Object type to return.</typeparam>
            <returns>Returns the object from its JSON representation.</returns>
        </member>
        <member name="P:CTCT.Util.RawApiResponse.Body">
            <summary>
            Requests body.
            </summary>
        </member>
        <member name="P:CTCT.Util.RawApiResponse.IsError">
            <summary>
            Returns true if error occur.
            </summary>
        </member>
        <member name="P:CTCT.Util.RawApiResponse.Info">
            <summary>
            List of errors.
            </summary>
        </member>
        <member name="P:CTCT.Util.RawApiResponse.HasData">
            <summary>
            Returns true if valid data exists.
            </summary>
        </member>
        <member name="P:CTCT.Util.RawApiResponse.StatusCode">
            <summary>
            Response status code.
            </summary>
        </member>
        <member name="P:CTCT.Util.RawApiResponse.Headers">
            <summary>
            Headers dictionary.
            </summary>
        </member>
        <member name="T:CTCT.Util.Extensions">
            <summary>
            Extansions class.
            </summary>
        </member>
        <member name="F:CTCT.Util.Extensions.ISO8601">
            <summary>
            ISO-8601 date time format string.
            </summary>
        </member>
        <member name="M:CTCT.Util.Extensions.ToISO8601String(System.Nullable{System.DateTime})">
            <summary>
            Converts a DateTime object to an ISO8601 representation.
            </summary>
            <param name="dateTime">DateTime.</param>
            <returns>Returns the ISO8601 string representation for the provided datetime.</returns>
        </member>
        <member name="M:CTCT.Util.Extensions.FromISO8601String(System.String)">
            <summary>
            Gets the DateTime from an ISO8601 string.
            </summary>
            <param name="str">String.</param>
            <returns>Returns a datetime object.</returns>
        </member>
        <member name="M:CTCT.Util.Extensions.ToJSON(System.Collections.Generic.IList{System.String})">
            <summary>
            Converts a list of strings to JSON representation.
            </summary>
            <param name="list">The string list.</param>
            <returns>Returns the JSON representation of the list.</returns>
        </member>
        <member name="M:CTCT.Util.Extensions.ToJSON``1(System.Collections.Generic.IList{``0})">
            <summary>
            Converts a list T of type Component to JSON representation.
            </summary>
            <typeparam name="T">Type of Component</typeparam>
            <param name="list">The string list.</param>
            <returns>Returns the JSON representation of the list.</returns>
        </member>
        <member name="M:CTCT.Util.Extensions.ToEnum``1(System.String)">
            <summary>
            Converts a string to its enum representation.
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="s">String to convert.</param>
            <returns>Returns the enum value.</returns>
        </member>
        <member name="T:CTCT.Util.IRestClient">
            <summary>
            Interface for issuing HTTP requests.
            </summary>
        </member>
        <member name="M:CTCT.Util.IRestClient.Get(System.String,System.String,System.String)">
            <summary>
            Make an Http GET request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="M:CTCT.Util.IRestClient.Post(System.String,System.String,System.String,System.String)">
            <summary>
            Make an Http POST request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <param name="data">Data to send with request.</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="M:CTCT.Util.IRestClient.Patch(System.String,System.String,System.String,System.String)">
            <summary>
            Make an Http PATCH request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <param name="data">Data to send with request.</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="M:CTCT.Util.IRestClient.PostMultipart(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Make an Http POST Multipart request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <param name="data">Data to send with request.</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="M:CTCT.Util.IRestClient.Put(System.String,System.String,System.String,System.String)">
            <summary>
            Make an Http PUT request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <param name="data">Data to send with request.</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="M:CTCT.Util.IRestClient.Delete(System.String,System.String,System.String)">
            <summary>
            Make an Http DELETE request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="T:CTCT.Util.MultipartBuilder">
            <summary>
            Multipart Builder class implementation
            </summary>
        </member>
        <member name="F:CTCT.Util.MultipartBuilder.MULTIPART_BOUNDARY">
            <summary>
            Boundary used for Multipart activities
            </summary>
        </member>
        <member name="M:CTCT.Util.MultipartBuilder.CreateMultipartContent(System.String,System.Byte[],System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Create multipart content in binary format
            </summary>
            <param name="fileName">The name of the file</param>
            <param name="fileContent">The content of the file</param>
            <param name="lists">List of contact list Ids to add/remove contacts to</param>
            <param name="fileType">The type of the file</param>
            <param name="folderId">The id of the folder</param>
            <param name="description">The file description</param>
            <param name="source">The file source</param>
            <returns>Returns a byte array used for request</returns>
        </member>
        <member name="T:CTCT.Util.RestClient">
            <summary>
            Class implementation of REST client.
            </summary>
        </member>
        <member name="F:CTCT.Util.RestClient.httpProcessor">
            <summary>
            Http processor
            </summary>
        </member>
        <member name="M:CTCT.Util.RestClient.Get(System.String,System.String,System.String)">
            <summary>
            Make an Http GET request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="M:CTCT.Util.RestClient.Post(System.String,System.String,System.String,System.String)">
            <summary>
            Make an Http POST request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <param name="data">Data to send with request.</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="M:CTCT.Util.RestClient.Patch(System.String,System.String,System.String,System.String)">
            <summary>
            Make an Http PATCH request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <param name="data">Data to send with request.</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="M:CTCT.Util.RestClient.PostMultipart(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Make an HTTP Post Multipart request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <param name="data">Data to send with request.</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="M:CTCT.Util.RestClient.Put(System.String,System.String,System.String,System.String)">
            <summary>
            Make an Http PUT request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <param name="data">Data to send with request.</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="M:CTCT.Util.RestClient.Delete(System.String,System.String,System.String)">
            <summary>
            Make an Http DELETE request.
            </summary>
            <param name="url">Request URL.</param>
            <param name="accessToken">Constant Contact OAuth2 access token</param>
            <param name="apiKey">The API key for the application</param>
            <returns>The response body, http info, and error (if one exists).</returns>
        </member>
        <member name="T:CTCT.Webhooks.CTCTWebhookUtil">
            <summary>
            Main Webhook Utility class 
            This is meant to be used by users to validate and parse Webhooks received from ConstantContact
            </summary>
        </member>
        <member name="F:CTCT.Webhooks.CTCTWebhookUtil.HmacHeaderName">
            <summary>
            Header name of the HmacSha256 hash
            </summary>
        </member>
        <member name="M:CTCT.Webhooks.CTCTWebhookUtil.#ctor(System.String)">
            <summary>
            Class constructor
            </summary>
            <param name="clientSecret">Client secret key</param>
        </member>
        <member name="M:CTCT.Webhooks.CTCTWebhookUtil.GetBillingChangeNotification(System.String,System.String)">
            <summary>
            Validates and parses the bodyMessage into BillingChangeNotification
            </summary>
            <param name="xCtctHmacSHA256">The value in the x-ctct-hmac-sha256 header</param>
            <param name="bodyMessage">The body message from the POST received from ConstantContact in Webhook callback</param>
            <returns>BillingChangeNotification object corresponding to bodyMessage in case of success; an exception is thrown otherwise.</returns>
        </member>
        <member name="M:CTCT.Webhooks.CTCTWebhookUtil.IsValidWebhook(System.String,System.String)">
            <summary>
            Validates a Webhook message
            </summary>
            <param name="xCtctHmacSHA256">The value in the x-ctct-hmac-sha256 header</param>
            <param name="bodyMessage">The body message from the POST received from ConstantContact in Webhook callback</param>
            <returns>True if in case of success; False if the Webhook is invalid</returns>
        </member>
        <member name="P:CTCT.Webhooks.CTCTWebhookUtil.ClientSecret">
            <summary>
            The client secret associated with the api key
            </summary>
        </member>
        <member name="T:CTCT.Util.StringEnum">
            <summary>
            Helper class for working with 'extended' enums using <see cref="T:CTCT.Util.StringValueAttribute"/> attributes.
            </summary>
        </member>
        <member name="M:CTCT.Util.StringEnum.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:CTCT.Util.StringEnum"/> instance.
            </summary>
            <param name="enumType">Enum type.</param>
        </member>
        <member name="M:CTCT.Util.StringEnum.GetStringValue(System.String)">
            <summary>
            Gets the string value associated with the given enum value.
            </summary>
            <param name="valueName">Name of the enum value.</param>
            <returns>String Value</returns>
        </member>
        <member name="M:CTCT.Util.StringEnum.GetStringValues">
            <summary>
            Gets the string values associated with the enum.
            </summary>
            <returns>String value array</returns>
        </member>
        <member name="M:CTCT.Util.StringEnum.GetListValues">
            <summary>
            Gets the values as a 'bindable' list datasource.
            </summary>
            <returns>IList for data binding</returns>
        </member>
        <member name="M:CTCT.Util.StringEnum.IsStringDefined(System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:CTCT.Util.StringEnum.IsStringDefined(System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:CTCT.Util.StringEnum.GetStringValue(System.Enum)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">Value.</param>
            <returns>String Value associated via a <see cref="T:CTCT.Util.StringValueAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:CTCT.Util.StringEnum.Parse(System.Type,System.String)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value (case sensitive).
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:CTCT.Util.StringEnum.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:CTCT.Util.StringEnum.IsStringDefined(System.Type,System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:CTCT.Util.StringEnum.IsStringDefined(System.Type,System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="P:CTCT.Util.StringEnum.EnumType">
            <summary>
            Gets the underlying enum type for this instance.
            </summary>
            <value></value>
        </member>
        <member name="T:CTCT.Util.StringValueAttribute">
            <summary>
            Simple attribute class for storing String Values
            </summary>
        </member>
        <member name="M:CTCT.Util.StringValueAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:CTCT.Util.StringValueAttribute"/> instance.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="P:CTCT.Util.StringValueAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value></value>
        </member>
        <member name="T:CTCT.Webhooks.Helper.WebHookValidator">
            <summary>
            Represents a helper class that validates a Webhook
            </summary>
        </member>
        <member name="M:CTCT.Webhooks.Helper.WebHookValidator.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="xCtctHmacSHA256">Header hash represented as base64 string</param>
            <param name="body">Body message</param>
            <param name="sharedSecret">Client secret</param>
        </member>
        <member name="M:CTCT.Webhooks.Helper.WebHookValidator.IsValid">
            <summary>
            To verify that the request came from Constant Contact, compute the HMAC digest and compare it to the value in the x-ctct-hmac-sha256 header.
            If they match, you can be sure that the webhook was sent by Constant Contact and the message has not been compromised.
            </summary>
            <returns>True if webhook is valid; False otherwise</returns>
        </member>
        <member name="M:CTCT.Webhooks.Helper.WebHookValidator.HashHMAC(System.String,System.String)">
            <summary>
            Compute HMACSHA256 hash based on message and secret
            </summary>
            <param name="message">Message</param>
            <param name="secret">Secret key</param>
            <returns>Base64 hash string</returns>
        </member>
        <member name="P:CTCT.Webhooks.Helper.WebHookValidator.CtctHttpHeader">
            <summary>
            HTTP header hash
            </summary>
        </member>
        <member name="P:CTCT.Webhooks.Helper.WebHookValidator.Body">
            <summary>
            HTTP body
            </summary>
        </member>
        <member name="P:CTCT.Webhooks.Helper.WebHookValidator.SharedSecret">
            <summary>
            Client secret key
            </summary>
        </member>
        <member name="T:CTCT.Webhooks.Model.BillingChangeNotification">
            <summary>
            Represents a notification object sent to client through Webhooks Notifications.
            </summary>
        </member>
        <member name="M:CTCT.Webhooks.Model.BillingChangeNotification.ToString">
            <summary>
            ToString override
            </summary>
            <returns>A string with details about the notification</returns>
        </member>
        <member name="P:CTCT.Webhooks.Model.BillingChangeNotification.Url">
            <summary>
            Notification url
            </summary>
        </member>
        <member name="P:CTCT.Webhooks.Model.BillingChangeNotification.EventTypeString">
            <summary>
            Event type string
            </summary>
        </member>
        <member name="P:CTCT.Webhooks.Model.BillingChangeNotification.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="T:CTCT.Webhooks.Model.BillingChangeNotificationType">
            <summary>
            Event types for billing change notification.
            </summary>
        </member>
        <member name="F:CTCT.Webhooks.Model.BillingChangeNotificationType.TierIncrease">
            <summary>
            Tier increase
            </summary>
        </member>
        <member name="F:CTCT.Webhooks.Model.BillingChangeNotificationType.TierDecrease">
            <summary>
            Tier decrease
            </summary>
        </member>
    </members>
</doc>
